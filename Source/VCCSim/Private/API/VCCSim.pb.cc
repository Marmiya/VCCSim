// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: VCCSim.proto
// Protobuf C++ Version: 5.29.0

#include "VCCSim.pb.h"

#include <algorithm>
#include <type_traits>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/generated_message_tctable_impl.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace VCCSim {

inline constexpr twist::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : linear_x_{0},
        linear_y_{0},
        linear_z_{0},
        angular_x_{0},
        angular_y_{0},
        angular_z_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR twist::twist(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct twistDefaultTypeInternal {
  PROTOBUF_CONSTEXPR twistDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~twistDefaultTypeInternal() {}
  union {
    twist _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 twistDefaultTypeInternal _twist_default_instance_;

inline constexpr Status::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : status_{false},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR Status::Status(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct StatusDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StatusDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~StatusDefaultTypeInternal() {}
  union {
    Status _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StatusDefaultTypeInternal _Status_default_instance_;

inline constexpr SegmentationCameraImageData::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : data_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        width_{0u},
        height_{0u},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR SegmentationCameraImageData::SegmentationCameraImageData(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct SegmentationCameraImageDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SegmentationCameraImageDataDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SegmentationCameraImageDataDefaultTypeInternal() {}
  union {
    SegmentationCameraImageData _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SegmentationCameraImageDataDefaultTypeInternal _SegmentationCameraImageData_default_instance_;

inline constexpr RobotName::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR RobotName::RobotName(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct RobotNameDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RobotNameDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RobotNameDefaultTypeInternal() {}
  union {
    RobotName _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RobotNameDefaultTypeInternal _RobotName_default_instance_;

inline constexpr RGBCameraImageData::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        data_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        width_{0u},
        height_{0u},
        format_{static_cast< ::VCCSim::Format >(0)},
        timestamp_{0u},
        bytes_per_pixel_{0u},
        stride_{0u},
        is_compressed_{false} {}

template <typename>
PROTOBUF_CONSTEXPR RGBCameraImageData::RGBCameraImageData(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct RGBCameraImageDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RGBCameraImageDataDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RGBCameraImageDataDefaultTypeInternal() {}
  union {
    RGBCameraImageData _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RGBCameraImageDataDefaultTypeInternal _RGBCameraImageData_default_instance_;

inline constexpr Position::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : x_{0},
        y_{0},
        z_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR Position::Position(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct PositionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PositionDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PositionDefaultTypeInternal() {}
  union {
    Position _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PositionDefaultTypeInternal _Position_default_instance_;

inline constexpr PoseOnlyYaw::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : x_{0},
        y_{0},
        z_{0},
        yaw_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR PoseOnlyYaw::PoseOnlyYaw(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct PoseOnlyYawDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PoseOnlyYawDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PoseOnlyYawDefaultTypeInternal() {}
  union {
    PoseOnlyYaw _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PoseOnlyYawDefaultTypeInternal _PoseOnlyYaw_default_instance_;

inline constexpr Pose::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : x_{0},
        y_{0},
        z_{0},
        roll_{0},
        pitch_{0},
        yaw_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR Pose::Pose(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct PoseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PoseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PoseDefaultTypeInternal() {}
  union {
    Pose _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PoseDefaultTypeInternal _Pose_default_instance_;

inline constexpr Point::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : x_{0},
        y_{0},
        z_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR Point::Point(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct PointDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PointDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PointDefaultTypeInternal() {}
  union {
    Point _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PointDefaultTypeInternal _Point_default_instance_;

inline constexpr MeshID::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : id_{0u},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR MeshID::MeshID(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct MeshIDDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MeshIDDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MeshIDDefaultTypeInternal() {}
  union {
    MeshID _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MeshIDDefaultTypeInternal _MeshID_default_instance_;

inline constexpr ImageSize::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : width_{0u},
        height_{0u},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR ImageSize::ImageSize(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct ImageSizeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ImageSizeDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ImageSizeDefaultTypeInternal() {}
  union {
    ImageSize _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ImageSizeDefaultTypeInternal _ImageSize_default_instance_;
              template <typename>
PROTOBUF_CONSTEXPR EmptyRequest::EmptyRequest(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::internal::ZeroFieldsBase(_class_data_.base()){}
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::internal::ZeroFieldsBase() {
}
#endif  // PROTOBUF_CUSTOM_VTABLE
struct EmptyRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EmptyRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~EmptyRequestDefaultTypeInternal() {}
  union {
    EmptyRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EmptyRequestDefaultTypeInternal _EmptyRequest_default_instance_;

inline constexpr DepthCameraImageData::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : data_{},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR DepthCameraImageData::DepthCameraImageData(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct DepthCameraImageDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DepthCameraImageDataDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~DepthCameraImageDataDefaultTypeInternal() {}
  union {
    DepthCameraImageData _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DepthCameraImageDataDefaultTypeInternal _DepthCameraImageData_default_instance_;

inline constexpr PointWithColor::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        point_{nullptr},
        color_{0u} {}

template <typename>
PROTOBUF_CONSTEXPR PointWithColor::PointWithColor(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct PointWithColorDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PointWithColorDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PointWithColorDefaultTypeInternal() {}
  union {
    PointWithColor _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PointWithColorDefaultTypeInternal _PointWithColor_default_instance_;

inline constexpr Odometry::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        pose_{nullptr},
        twist_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR Odometry::Odometry(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct OdometryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OdometryDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~OdometryDefaultTypeInternal() {}
  union {
    Odometry _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OdometryDefaultTypeInternal _Odometry_default_instance_;

inline constexpr MeshData::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        data_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        transform_{nullptr},
        format_{0u},
        version_{0u},
        simplified_{false} {}

template <typename>
PROTOBUF_CONSTEXPR MeshData::MeshData(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct MeshDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MeshDataDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MeshDataDefaultTypeInternal() {}
  union {
    MeshData _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MeshDataDefaultTypeInternal _MeshData_default_instance_;

inline constexpr LidarData::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : data_{},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR LidarData::LidarData(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct LidarDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LidarDataDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~LidarDataDefaultTypeInternal() {}
  union {
    LidarData _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LidarDataDefaultTypeInternal _LidarData_default_instance_;

inline constexpr IndexedCamera::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        robot_name_{nullptr},
        index_{0u},
        format_{static_cast< ::VCCSim::Format >(0)} {}

template <typename>
PROTOBUF_CONSTEXPR IndexedCamera::IndexedCamera(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct IndexedCameraDefaultTypeInternal {
  PROTOBUF_CONSTEXPR IndexedCameraDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~IndexedCameraDefaultTypeInternal() {}
  union {
    IndexedCamera _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IndexedCameraDefaultTypeInternal _IndexedCamera_default_instance_;

inline constexpr FlashPose::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        pose_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR FlashPose::FlashPose(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct FlashPoseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FlashPoseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~FlashPoseDefaultTypeInternal() {}
  union {
    FlashPose _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FlashPoseDefaultTypeInternal _FlashPose_default_instance_;

inline constexpr FlashPath::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : path_{},
        name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR FlashPath::FlashPath(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct FlashPathDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FlashPathDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~FlashPathDefaultTypeInternal() {}
  union {
    FlashPath _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FlashPathDefaultTypeInternal _FlashPath_default_instance_;

inline constexpr DronePose::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        pose_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR DronePose::DronePose(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct DronePoseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DronePoseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~DronePoseDefaultTypeInternal() {}
  union {
    DronePose _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DronePoseDefaultTypeInternal _DronePose_default_instance_;

inline constexpr DronePath::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : path_{},
        name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR DronePath::DronePath(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct DronePathDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DronePathDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~DronePathDefaultTypeInternal() {}
  union {
    DronePath _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DronePathDefaultTypeInternal _DronePath_default_instance_;

inline constexpr DepthCameraPointData::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : data_{},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR DepthCameraPointData::DepthCameraPointData(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct DepthCameraPointDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DepthCameraPointDataDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~DepthCameraPointDataDefaultTypeInternal() {}
  union {
    DepthCameraPointData _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DepthCameraPointDataDefaultTypeInternal _DepthCameraPointData_default_instance_;

inline constexpr CarPose::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        pose_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR CarPose::CarPose(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct CarPoseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CarPoseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CarPoseDefaultTypeInternal() {}
  union {
    CarPose _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CarPoseDefaultTypeInternal _CarPose_default_instance_;

inline constexpr CarPath::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : path_{},
        name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR CarPath::CarPath(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct CarPathDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CarPathDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CarPathDefaultTypeInternal() {}
  union {
    CarPath _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CarPathDefaultTypeInternal _CarPath_default_instance_;

inline constexpr PointCloudWithColor::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : data_{},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR PointCloudWithColor::PointCloudWithColor(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct PointCloudWithColorDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PointCloudWithColorDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PointCloudWithColorDefaultTypeInternal() {}
  union {
    PointCloudWithColor _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PointCloudWithColorDefaultTypeInternal _PointCloudWithColor_default_instance_;

inline constexpr LidarDataAndOdom::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        data_{nullptr},
        odom_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR LidarDataAndOdom::LidarDataAndOdom(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct LidarDataAndOdomDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LidarDataAndOdomDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~LidarDataAndOdomDefaultTypeInternal() {}
  union {
    LidarDataAndOdom _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LidarDataAndOdomDefaultTypeInternal _LidarDataAndOdom_default_instance_;
}  // namespace VCCSim
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_VCCSim_2eproto[1];
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_VCCSim_2eproto = nullptr;
const ::uint32_t
    TableStruct_VCCSim_2eproto::offsets[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
        protodesc_cold) = {
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::VCCSim::Point, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::VCCSim::Point, _impl_.x_),
        PROTOBUF_FIELD_OFFSET(::VCCSim::Point, _impl_.y_),
        PROTOBUF_FIELD_OFFSET(::VCCSim::Point, _impl_.z_),
        PROTOBUF_FIELD_OFFSET(::VCCSim::PointWithColor, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::VCCSim::PointWithColor, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::VCCSim::PointWithColor, _impl_.point_),
        PROTOBUF_FIELD_OFFSET(::VCCSim::PointWithColor, _impl_.color_),
        0,
        ~0u,
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::VCCSim::PointCloudWithColor, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::VCCSim::PointCloudWithColor, _impl_.data_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::VCCSim::EmptyRequest, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::VCCSim::Position, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::VCCSim::Position, _impl_.x_),
        PROTOBUF_FIELD_OFFSET(::VCCSim::Position, _impl_.y_),
        PROTOBUF_FIELD_OFFSET(::VCCSim::Position, _impl_.z_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::VCCSim::Pose, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::VCCSim::Pose, _impl_.x_),
        PROTOBUF_FIELD_OFFSET(::VCCSim::Pose, _impl_.y_),
        PROTOBUF_FIELD_OFFSET(::VCCSim::Pose, _impl_.z_),
        PROTOBUF_FIELD_OFFSET(::VCCSim::Pose, _impl_.roll_),
        PROTOBUF_FIELD_OFFSET(::VCCSim::Pose, _impl_.pitch_),
        PROTOBUF_FIELD_OFFSET(::VCCSim::Pose, _impl_.yaw_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::VCCSim::PoseOnlyYaw, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::VCCSim::PoseOnlyYaw, _impl_.x_),
        PROTOBUF_FIELD_OFFSET(::VCCSim::PoseOnlyYaw, _impl_.y_),
        PROTOBUF_FIELD_OFFSET(::VCCSim::PoseOnlyYaw, _impl_.z_),
        PROTOBUF_FIELD_OFFSET(::VCCSim::PoseOnlyYaw, _impl_.yaw_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::VCCSim::twist, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::VCCSim::twist, _impl_.linear_x_),
        PROTOBUF_FIELD_OFFSET(::VCCSim::twist, _impl_.linear_y_),
        PROTOBUF_FIELD_OFFSET(::VCCSim::twist, _impl_.linear_z_),
        PROTOBUF_FIELD_OFFSET(::VCCSim::twist, _impl_.angular_x_),
        PROTOBUF_FIELD_OFFSET(::VCCSim::twist, _impl_.angular_y_),
        PROTOBUF_FIELD_OFFSET(::VCCSim::twist, _impl_.angular_z_),
        PROTOBUF_FIELD_OFFSET(::VCCSim::Odometry, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::VCCSim::Odometry, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::VCCSim::Odometry, _impl_.pose_),
        PROTOBUF_FIELD_OFFSET(::VCCSim::Odometry, _impl_.twist_),
        0,
        1,
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::VCCSim::Status, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::VCCSim::Status, _impl_.status_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::VCCSim::RobotName, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::VCCSim::RobotName, _impl_.name_),
        PROTOBUF_FIELD_OFFSET(::VCCSim::IndexedCamera, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::VCCSim::IndexedCamera, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::VCCSim::IndexedCamera, _impl_.robot_name_),
        PROTOBUF_FIELD_OFFSET(::VCCSim::IndexedCamera, _impl_.index_),
        PROTOBUF_FIELD_OFFSET(::VCCSim::IndexedCamera, _impl_.format_),
        0,
        ~0u,
        ~0u,
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::VCCSim::ImageSize, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::VCCSim::ImageSize, _impl_.width_),
        PROTOBUF_FIELD_OFFSET(::VCCSim::ImageSize, _impl_.height_),
        PROTOBUF_FIELD_OFFSET(::VCCSim::MeshData, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::VCCSim::MeshData, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::VCCSim::MeshData, _impl_.data_),
        PROTOBUF_FIELD_OFFSET(::VCCSim::MeshData, _impl_.format_),
        PROTOBUF_FIELD_OFFSET(::VCCSim::MeshData, _impl_.version_),
        PROTOBUF_FIELD_OFFSET(::VCCSim::MeshData, _impl_.simplified_),
        PROTOBUF_FIELD_OFFSET(::VCCSim::MeshData, _impl_.transform_),
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        0,
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::VCCSim::MeshID, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::VCCSim::MeshID, _impl_.id_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::VCCSim::LidarData, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::VCCSim::LidarData, _impl_.data_),
        PROTOBUF_FIELD_OFFSET(::VCCSim::LidarDataAndOdom, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::VCCSim::LidarDataAndOdom, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::VCCSim::LidarDataAndOdom, _impl_.data_),
        PROTOBUF_FIELD_OFFSET(::VCCSim::LidarDataAndOdom, _impl_.odom_),
        0,
        1,
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::VCCSim::DepthCameraPointData, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::VCCSim::DepthCameraPointData, _impl_.data_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::VCCSim::DepthCameraImageData, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::VCCSim::DepthCameraImageData, _impl_.data_),
        PROTOBUF_FIELD_OFFSET(::VCCSim::RGBCameraImageData, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::VCCSim::RGBCameraImageData, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::VCCSim::RGBCameraImageData, _impl_.width_),
        PROTOBUF_FIELD_OFFSET(::VCCSim::RGBCameraImageData, _impl_.height_),
        PROTOBUF_FIELD_OFFSET(::VCCSim::RGBCameraImageData, _impl_.data_),
        PROTOBUF_FIELD_OFFSET(::VCCSim::RGBCameraImageData, _impl_.format_),
        PROTOBUF_FIELD_OFFSET(::VCCSim::RGBCameraImageData, _impl_.timestamp_),
        PROTOBUF_FIELD_OFFSET(::VCCSim::RGBCameraImageData, _impl_.bytes_per_pixel_),
        PROTOBUF_FIELD_OFFSET(::VCCSim::RGBCameraImageData, _impl_.stride_),
        PROTOBUF_FIELD_OFFSET(::VCCSim::RGBCameraImageData, _impl_.is_compressed_),
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        0,
        1,
        2,
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::VCCSim::SegmentationCameraImageData, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::VCCSim::SegmentationCameraImageData, _impl_.width_),
        PROTOBUF_FIELD_OFFSET(::VCCSim::SegmentationCameraImageData, _impl_.height_),
        PROTOBUF_FIELD_OFFSET(::VCCSim::SegmentationCameraImageData, _impl_.data_),
        PROTOBUF_FIELD_OFFSET(::VCCSim::DronePose, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::VCCSim::DronePose, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::VCCSim::DronePose, _impl_.name_),
        PROTOBUF_FIELD_OFFSET(::VCCSim::DronePose, _impl_.pose_),
        ~0u,
        0,
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::VCCSim::DronePath, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::VCCSim::DronePath, _impl_.name_),
        PROTOBUF_FIELD_OFFSET(::VCCSim::DronePath, _impl_.path_),
        PROTOBUF_FIELD_OFFSET(::VCCSim::CarPose, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::VCCSim::CarPose, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::VCCSim::CarPose, _impl_.name_),
        PROTOBUF_FIELD_OFFSET(::VCCSim::CarPose, _impl_.pose_),
        ~0u,
        0,
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::VCCSim::CarPath, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::VCCSim::CarPath, _impl_.name_),
        PROTOBUF_FIELD_OFFSET(::VCCSim::CarPath, _impl_.path_),
        PROTOBUF_FIELD_OFFSET(::VCCSim::FlashPose, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::VCCSim::FlashPose, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::VCCSim::FlashPose, _impl_.name_),
        PROTOBUF_FIELD_OFFSET(::VCCSim::FlashPose, _impl_.pose_),
        ~0u,
        0,
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::VCCSim::FlashPath, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::VCCSim::FlashPath, _impl_.name_),
        PROTOBUF_FIELD_OFFSET(::VCCSim::FlashPath, _impl_.path_),
};

static const ::_pbi::MigrationSchema
    schemas[] ABSL_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
        {0, -1, -1, sizeof(::VCCSim::Point)},
        {11, 21, -1, sizeof(::VCCSim::PointWithColor)},
        {23, -1, -1, sizeof(::VCCSim::PointCloudWithColor)},
        {32, -1, -1, sizeof(::VCCSim::EmptyRequest)},
        {40, -1, -1, sizeof(::VCCSim::Position)},
        {51, -1, -1, sizeof(::VCCSim::Pose)},
        {65, -1, -1, sizeof(::VCCSim::PoseOnlyYaw)},
        {77, -1, -1, sizeof(::VCCSim::twist)},
        {91, 101, -1, sizeof(::VCCSim::Odometry)},
        {103, -1, -1, sizeof(::VCCSim::Status)},
        {112, -1, -1, sizeof(::VCCSim::RobotName)},
        {121, 132, -1, sizeof(::VCCSim::IndexedCamera)},
        {135, -1, -1, sizeof(::VCCSim::ImageSize)},
        {145, 158, -1, sizeof(::VCCSim::MeshData)},
        {163, -1, -1, sizeof(::VCCSim::MeshID)},
        {172, -1, -1, sizeof(::VCCSim::LidarData)},
        {181, 191, -1, sizeof(::VCCSim::LidarDataAndOdom)},
        {193, -1, -1, sizeof(::VCCSim::DepthCameraPointData)},
        {202, -1, -1, sizeof(::VCCSim::DepthCameraImageData)},
        {211, 227, -1, sizeof(::VCCSim::RGBCameraImageData)},
        {235, -1, -1, sizeof(::VCCSim::SegmentationCameraImageData)},
        {246, 256, -1, sizeof(::VCCSim::DronePose)},
        {258, -1, -1, sizeof(::VCCSim::DronePath)},
        {268, 278, -1, sizeof(::VCCSim::CarPose)},
        {280, -1, -1, sizeof(::VCCSim::CarPath)},
        {290, 300, -1, sizeof(::VCCSim::FlashPose)},
        {302, -1, -1, sizeof(::VCCSim::FlashPath)},
};
static const ::_pb::Message* const file_default_instances[] = {
    &::VCCSim::_Point_default_instance_._instance,
    &::VCCSim::_PointWithColor_default_instance_._instance,
    &::VCCSim::_PointCloudWithColor_default_instance_._instance,
    &::VCCSim::_EmptyRequest_default_instance_._instance,
    &::VCCSim::_Position_default_instance_._instance,
    &::VCCSim::_Pose_default_instance_._instance,
    &::VCCSim::_PoseOnlyYaw_default_instance_._instance,
    &::VCCSim::_twist_default_instance_._instance,
    &::VCCSim::_Odometry_default_instance_._instance,
    &::VCCSim::_Status_default_instance_._instance,
    &::VCCSim::_RobotName_default_instance_._instance,
    &::VCCSim::_IndexedCamera_default_instance_._instance,
    &::VCCSim::_ImageSize_default_instance_._instance,
    &::VCCSim::_MeshData_default_instance_._instance,
    &::VCCSim::_MeshID_default_instance_._instance,
    &::VCCSim::_LidarData_default_instance_._instance,
    &::VCCSim::_LidarDataAndOdom_default_instance_._instance,
    &::VCCSim::_DepthCameraPointData_default_instance_._instance,
    &::VCCSim::_DepthCameraImageData_default_instance_._instance,
    &::VCCSim::_RGBCameraImageData_default_instance_._instance,
    &::VCCSim::_SegmentationCameraImageData_default_instance_._instance,
    &::VCCSim::_DronePose_default_instance_._instance,
    &::VCCSim::_DronePath_default_instance_._instance,
    &::VCCSim::_CarPose_default_instance_._instance,
    &::VCCSim::_CarPath_default_instance_._instance,
    &::VCCSim::_FlashPose_default_instance_._instance,
    &::VCCSim::_FlashPath_default_instance_._instance,
};
const char descriptor_table_protodef_VCCSim_2eproto[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
    protodesc_cold) = {
    "\n\014VCCSim.proto\022\006VCCSim\"(\n\005Point\022\t\n\001x\030\001 \001"
    "(\002\022\t\n\001y\030\002 \001(\002\022\t\n\001z\030\003 \001(\002\"=\n\016PointWithCol"
    "or\022\034\n\005point\030\001 \001(\0132\r.VCCSim.Point\022\r\n\005colo"
    "r\030\002 \001(\r\";\n\023PointCloudWithColor\022$\n\004data\030\001"
    " \003(\0132\026.VCCSim.PointWithColor\"\016\n\014EmptyReq"
    "uest\"+\n\010Position\022\t\n\001x\030\001 \001(\002\022\t\n\001y\030\002 \001(\002\022\t"
    "\n\001z\030\003 \001(\002\"Q\n\004Pose\022\t\n\001x\030\001 \001(\002\022\t\n\001y\030\002 \001(\002\022"
    "\t\n\001z\030\003 \001(\002\022\014\n\004roll\030\004 \001(\002\022\r\n\005pitch\030\005 \001(\002\022"
    "\013\n\003yaw\030\006 \001(\002\";\n\013PoseOnlyYaw\022\t\n\001x\030\001 \001(\002\022\t"
    "\n\001y\030\002 \001(\002\022\t\n\001z\030\003 \001(\002\022\013\n\003yaw\030\004 \001(\002\"v\n\005twi"
    "st\022\020\n\010linear_x\030\001 \001(\002\022\020\n\010linear_y\030\002 \001(\002\022\020"
    "\n\010linear_z\030\003 \001(\002\022\021\n\tangular_x\030\004 \001(\002\022\021\n\ta"
    "ngular_y\030\005 \001(\002\022\021\n\tangular_z\030\006 \001(\002\"D\n\010Odo"
    "metry\022\032\n\004pose\030\001 \001(\0132\014.VCCSim.Pose\022\034\n\005twi"
    "st\030\002 \001(\0132\r.VCCSim.twist\"\030\n\006Status\022\016\n\006sta"
    "tus\030\001 \001(\010\"\031\n\tRobotName\022\014\n\004name\030\001 \001(\t\"e\n\r"
    "IndexedCamera\022%\n\nrobot_name\030\001 \001(\0132\021.VCCS"
    "im.RobotName\022\r\n\005index\030\002 \001(\r\022\036\n\006format\030\003 "
    "\001(\0162\016.VCCSim.Format\"*\n\tImageSize\022\r\n\005widt"
    "h\030\001 \001(\r\022\016\n\006height\030\002 \001(\r\"n\n\010MeshData\022\014\n\004d"
    "ata\030\001 \001(\014\022\016\n\006format\030\002 \001(\r\022\017\n\007version\030\003 \001"
    "(\r\022\022\n\nsimplified\030\004 \001(\010\022\037\n\ttransform\030\005 \001("
    "\0132\014.VCCSim.Pose\"\024\n\006MeshID\022\n\n\002id\030\001 \001(\r\"(\n"
    "\tLidarData\022\033\n\004data\030\001 \003(\0132\r.VCCSim.Point\""
    "S\n\020LidarDataAndOdom\022\037\n\004data\030\001 \001(\0132\021.VCCS"
    "im.LidarData\022\036\n\004odom\030\002 \001(\0132\020.VCCSim.Odom"
    "etry\"3\n\024DepthCameraPointData\022\033\n\004data\030\001 \003"
    "(\0132\r.VCCSim.Point\"$\n\024DepthCameraImageDat"
    "a\022\014\n\004data\030\001 \003(\002\"\364\001\n\022RGBCameraImageData\022\r"
    "\n\005width\030\001 \001(\r\022\016\n\006height\030\002 \001(\r\022\014\n\004data\030\003 "
    "\001(\014\022\036\n\006format\030\004 \001(\0162\016.VCCSim.Format\022\021\n\tt"
    "imestamp\030\005 \001(\r\022\034\n\017bytes_per_pixel\030\006 \001(\rH"
    "\000\210\001\001\022\023\n\006stride\030\007 \001(\rH\001\210\001\001\022\032\n\ris_compress"
    "ed\030\010 \001(\010H\002\210\001\001B\022\n\020_bytes_per_pixelB\t\n\007_st"
    "rideB\020\n\016_is_compressed\"J\n\033SegmentationCa"
    "meraImageData\022\r\n\005width\030\001 \001(\r\022\016\n\006height\030\002"
    " \001(\r\022\014\n\004data\030\003 \001(\014\"5\n\tDronePose\022\014\n\004name\030"
    "\001 \001(\t\022\032\n\004pose\030\002 \001(\0132\014.VCCSim.Pose\"5\n\tDro"
    "nePath\022\014\n\004name\030\001 \001(\t\022\032\n\004path\030\002 \003(\0132\014.VCC"
    "Sim.Pose\":\n\007CarPose\022\014\n\004name\030\001 \001(\t\022!\n\004pos"
    "e\030\002 \001(\0132\023.VCCSim.PoseOnlyYaw\":\n\007CarPath\022"
    "\014\n\004name\030\001 \001(\t\022!\n\004path\030\002 \003(\0132\023.VCCSim.Pos"
    "eOnlyYaw\"5\n\tFlashPose\022\014\n\004name\030\001 \001(\t\022\032\n\004p"
    "ose\030\002 \001(\0132\014.VCCSim.Pose\"5\n\tFlashPath\022\014\n\004"
    "name\030\001 \001(\t\022\032\n\004path\030\002 \003(\0132\014.VCCSim.Pose*$"
    "\n\006Format\022\007\n\003PNG\020\000\022\010\n\004JPEG\020\001\022\007\n\003RAW\020\0022E\n\020"
    "RecordingService\0221\n\tRecording\022\024.VCCSim.E"
    "mptyRequest\032\016.VCCSim.Status2\275\001\n\014LidarSer"
    "vice\0224\n\014GetLiDARData\022\021.VCCSim.RobotName\032"
    "\021.VCCSim.LidarData\0223\n\014GetLiDAROdom\022\021.VCC"
    "Sim.RobotName\032\020.VCCSim.Odometry\022B\n\023GetLi"
    "DARDataAndOdom\022\021.VCCSim.RobotName\032\030.VCCS"
    "im.LidarDataAndOdom2\250\002\n\022DepthCameraServi"
    "ce\022J\n\027GetDepthCameraPointData\022\021.VCCSim.R"
    "obotName\032\034.VCCSim.DepthCameraPointData\022\?"
    "\n\027GetDepthCameraImageSize\022\021.VCCSim.Robot"
    "Name\032\021.VCCSim.ImageSize\022J\n\027GetDepthCamer"
    "aImageData\022\021.VCCSim.RobotName\032\034.VCCSim.D"
    "epthCameraImageData\0229\n\022GetDepthCameraOdo"
    "m\022\021.VCCSim.RobotName\032\020.VCCSim.Odometry2\350"
    "\001\n\020RGBCameraService\0227\n\020GetRGBCameraOdom\022"
    "\021.VCCSim.RobotName\032\020.VCCSim.Odometry\022Q\n\034"
    "GetRGBIndexedCameraImageData\022\025.VCCSim.In"
    "dexedCamera\032\032.VCCSim.RGBCameraImageData\022"
    "H\n\034GetRGBIndexedCameraImageSize\022\025.VCCSim"
    ".IndexedCamera\032\021.VCCSim.ImageSize2\207\002\n\031Se"
    "gmentationCameraService\022@\n\031GetSegmentati"
    "onCameraOdom\022\021.VCCSim.RobotName\032\020.VCCSim"
    ".Odometry\022\\\n\036GetSegmentationCameraImageD"
    "ata\022\025.VCCSim.IndexedCamera\032#.VCCSim.Segm"
    "entationCameraImageData\022J\n\036GetSegmentati"
    "onCameraImageSize\022\025.VCCSim.IndexedCamera"
    "\032\021.VCCSim.ImageSize2\247\001\n\014DroneService\022/\n\014"
    "GetDronePose\022\021.VCCSim.RobotName\032\014.VCCSim"
    ".Pose\0222\n\rSendDronePose\022\021.VCCSim.DronePos"
    "e\032\016.VCCSim.Status\0222\n\rSendDronePath\022\021.VCC"
    "Sim.DronePath\032\016.VCCSim.Status2\237\001\n\nCarSer"
    "vice\0221\n\nGetCarOdom\022\021.VCCSim.RobotName\032\020."
    "VCCSim.Odometry\022.\n\013SendCarPose\022\017.VCCSim."
    "CarPose\032\016.VCCSim.Status\022.\n\013SendCarPath\022\017"
    ".VCCSim.CarPath\032\016.VCCSim.Status2\216\002\n\014Flas"
    "hService\022/\n\014GetFlashPose\022\021.VCCSim.RobotN"
    "ame\032\014.VCCSim.Pose\0222\n\rSendFlashPose\022\021.VCC"
    "Sim.FlashPose\032\016.VCCSim.Status\0222\n\rSendFla"
    "shPath\022\021.VCCSim.FlashPath\032\016.VCCSim.Statu"
    "s\0224\n\017CheckFlashReady\022\021.VCCSim.RobotName\032"
    "\016.VCCSim.Status\022/\n\nMoveToNext\022\021.VCCSim.R"
    "obotName\032\016.VCCSim.Status2\243\001\n\013MeshService"
    "\022,\n\010SendMesh\022\020.VCCSim.MeshData\032\016.VCCSim."
    "Status\0222\n\016SendGlobalMesh\022\020.VCCSim.MeshDa"
    "ta\032\016.VCCSim.MeshID\0222\n\020RemoveGlobalMesh\022\016"
    ".VCCSim.MeshID\032\016.VCCSim.Status2[\n\021PointC"
    "loudService\022F\n\027SendPointCloudWithColor\022\033"
    ".VCCSim.PointCloudWithColor\032\016.VCCSim.Sta"
    "tus2\274\001\n\020SafeCheckService\0224\n\017CheckSafetyP"
    "awn\022\021.VCCSim.RobotName\032\016.VCCSim.Status\0227"
    "\n\023CheckSafetyPosition\022\020.VCCSim.Position\032"
    "\016.VCCSim.Status\0229\n\024CheckSafetyDronePath\022"
    "\021.VCCSim.DronePath\032\016.VCCSim.Statusb\006prot"
    "o3"
};
static ::absl::once_flag descriptor_table_VCCSim_2eproto_once;
PROTOBUF_CONSTINIT const ::_pbi::DescriptorTable descriptor_table_VCCSim_2eproto = {
    false,
    false,
    3962,
    descriptor_table_protodef_VCCSim_2eproto,
    "VCCSim.proto",
    &descriptor_table_VCCSim_2eproto_once,
    nullptr,
    0,
    27,
    schemas,
    file_default_instances,
    TableStruct_VCCSim_2eproto::offsets,
    file_level_enum_descriptors_VCCSim_2eproto,
    file_level_service_descriptors_VCCSim_2eproto,
};
namespace VCCSim {
const ::google::protobuf::EnumDescriptor* Format_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_VCCSim_2eproto);
  return file_level_enum_descriptors_VCCSim_2eproto[0];
}
PROTOBUF_CONSTINIT const uint32_t Format_internal_data_[] = {
    196608u, 0u, };
bool Format_IsValid(int value) {
  return 0 <= value && value <= 2;
}
// ===================================================================

class Point::_Internal {
 public:
};

Point::Point(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:VCCSim.Point)
}
Point::Point(
    ::google::protobuf::Arena* arena, const Point& from)
    : Point(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE Point::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void Point::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, x_),
           0,
           offsetof(Impl_, z_) -
               offsetof(Impl_, x_) +
               sizeof(Impl_::z_));
}
Point::~Point() {
  // @@protoc_insertion_point(destructor:VCCSim.Point)
  SharedDtor(*this);
}
inline void Point::SharedDtor(MessageLite& self) {
  Point& this_ = static_cast<Point&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* Point::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) Point(arena);
}
constexpr auto Point::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(Point),
                                            alignof(Point));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull Point::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_Point_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &Point::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<Point>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &Point::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<Point>(), &Point::ByteSizeLong,
            &Point::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(Point, _impl_._cached_size_),
        false,
    },
    &Point::kDescriptorMethods,
    &descriptor_table_VCCSim_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* Point::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 0, 0, 2> Point::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::VCCSim::Point>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // float x = 1;
    {::_pbi::TcParser::FastF32S1,
     {13, 63, 0, PROTOBUF_FIELD_OFFSET(Point, _impl_.x_)}},
    // float y = 2;
    {::_pbi::TcParser::FastF32S1,
     {21, 63, 0, PROTOBUF_FIELD_OFFSET(Point, _impl_.y_)}},
    // float z = 3;
    {::_pbi::TcParser::FastF32S1,
     {29, 63, 0, PROTOBUF_FIELD_OFFSET(Point, _impl_.z_)}},
  }}, {{
    65535, 65535
  }}, {{
    // float x = 1;
    {PROTOBUF_FIELD_OFFSET(Point, _impl_.x_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float y = 2;
    {PROTOBUF_FIELD_OFFSET(Point, _impl_.y_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float z = 3;
    {PROTOBUF_FIELD_OFFSET(Point, _impl_.z_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
  }},
  // no aux_entries
  {{
  }},
};

PROTOBUF_NOINLINE void Point::Clear() {
// @@protoc_insertion_point(message_clear_start:VCCSim.Point)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.x_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.z_) -
      reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.z_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* Point::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const Point& this_ = static_cast<const Point&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* Point::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const Point& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:VCCSim.Point)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // float x = 1;
          if (::absl::bit_cast<::uint32_t>(this_._internal_x()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                1, this_._internal_x(), target);
          }

          // float y = 2;
          if (::absl::bit_cast<::uint32_t>(this_._internal_y()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                2, this_._internal_y(), target);
          }

          // float z = 3;
          if (::absl::bit_cast<::uint32_t>(this_._internal_z()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                3, this_._internal_z(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:VCCSim.Point)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t Point::ByteSizeLong(const MessageLite& base) {
          const Point& this_ = static_cast<const Point&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t Point::ByteSizeLong() const {
          const Point& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:VCCSim.Point)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // float x = 1;
            if (::absl::bit_cast<::uint32_t>(this_._internal_x()) != 0) {
              total_size += 5;
            }
            // float y = 2;
            if (::absl::bit_cast<::uint32_t>(this_._internal_y()) != 0) {
              total_size += 5;
            }
            // float z = 3;
            if (::absl::bit_cast<::uint32_t>(this_._internal_z()) != 0) {
              total_size += 5;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void Point::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<Point*>(&to_msg);
  auto& from = static_cast<const Point&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:VCCSim.Point)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (::absl::bit_cast<::uint32_t>(from._internal_x()) != 0) {
    _this->_impl_.x_ = from._impl_.x_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_y()) != 0) {
    _this->_impl_.y_ = from._impl_.y_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_z()) != 0) {
    _this->_impl_.z_ = from._impl_.z_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Point::CopyFrom(const Point& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:VCCSim.Point)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void Point::InternalSwap(Point* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Point, _impl_.z_)
      + sizeof(Point::_impl_.z_)
      - PROTOBUF_FIELD_OFFSET(Point, _impl_.x_)>(
          reinterpret_cast<char*>(&_impl_.x_),
          reinterpret_cast<char*>(&other->_impl_.x_));
}

::google::protobuf::Metadata Point::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class PointWithColor::_Internal {
 public:
  using HasBits =
      decltype(std::declval<PointWithColor>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(PointWithColor, _impl_._has_bits_);
};

PointWithColor::PointWithColor(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:VCCSim.PointWithColor)
}
inline PROTOBUF_NDEBUG_INLINE PointWithColor::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::VCCSim::PointWithColor& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

PointWithColor::PointWithColor(
    ::google::protobuf::Arena* arena,
    const PointWithColor& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  PointWithColor* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.point_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::VCCSim::Point>(
                              arena, *from._impl_.point_)
                        : nullptr;
  _impl_.color_ = from._impl_.color_;

  // @@protoc_insertion_point(copy_constructor:VCCSim.PointWithColor)
}
inline PROTOBUF_NDEBUG_INLINE PointWithColor::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void PointWithColor::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, point_),
           0,
           offsetof(Impl_, color_) -
               offsetof(Impl_, point_) +
               sizeof(Impl_::color_));
}
PointWithColor::~PointWithColor() {
  // @@protoc_insertion_point(destructor:VCCSim.PointWithColor)
  SharedDtor(*this);
}
inline void PointWithColor::SharedDtor(MessageLite& self) {
  PointWithColor& this_ = static_cast<PointWithColor&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.point_;
  this_._impl_.~Impl_();
}

inline void* PointWithColor::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) PointWithColor(arena);
}
constexpr auto PointWithColor::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(PointWithColor),
                                            alignof(PointWithColor));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull PointWithColor::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_PointWithColor_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &PointWithColor::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<PointWithColor>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &PointWithColor::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<PointWithColor>(), &PointWithColor::ByteSizeLong,
            &PointWithColor::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(PointWithColor, _impl_._cached_size_),
        false,
    },
    &PointWithColor::kDescriptorMethods,
    &descriptor_table_VCCSim_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* PointWithColor::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 1, 0, 2> PointWithColor::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(PointWithColor, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::VCCSim::PointWithColor>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // uint32 color = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(PointWithColor, _impl_.color_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(PointWithColor, _impl_.color_)}},
    // .VCCSim.Point point = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(PointWithColor, _impl_.point_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .VCCSim.Point point = 1;
    {PROTOBUF_FIELD_OFFSET(PointWithColor, _impl_.point_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // uint32 color = 2;
    {PROTOBUF_FIELD_OFFSET(PointWithColor, _impl_.color_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
  }}, {{
    {::_pbi::TcParser::GetTable<::VCCSim::Point>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void PointWithColor::Clear() {
// @@protoc_insertion_point(message_clear_start:VCCSim.PointWithColor)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.point_ != nullptr);
    _impl_.point_->Clear();
  }
  _impl_.color_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* PointWithColor::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const PointWithColor& this_ = static_cast<const PointWithColor&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* PointWithColor::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const PointWithColor& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:VCCSim.PointWithColor)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // .VCCSim.Point point = 1;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1, *this_._impl_.point_, this_._impl_.point_->GetCachedSize(), target,
                stream);
          }

          // uint32 color = 2;
          if (this_._internal_color() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
                2, this_._internal_color(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:VCCSim.PointWithColor)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t PointWithColor::ByteSizeLong(const MessageLite& base) {
          const PointWithColor& this_ = static_cast<const PointWithColor&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t PointWithColor::ByteSizeLong() const {
          const PointWithColor& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:VCCSim.PointWithColor)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // .VCCSim.Point point = 1;
            cached_has_bits = this_._impl_._has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.point_);
            }
          }
           {
            // uint32 color = 2;
            if (this_._internal_color() != 0) {
              total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
                  this_._internal_color());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void PointWithColor::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<PointWithColor*>(&to_msg);
  auto& from = static_cast<const PointWithColor&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:VCCSim.PointWithColor)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(from._impl_.point_ != nullptr);
    if (_this->_impl_.point_ == nullptr) {
      _this->_impl_.point_ =
          ::google::protobuf::Message::CopyConstruct<::VCCSim::Point>(arena, *from._impl_.point_);
    } else {
      _this->_impl_.point_->MergeFrom(*from._impl_.point_);
    }
  }
  if (from._internal_color() != 0) {
    _this->_impl_.color_ = from._impl_.color_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void PointWithColor::CopyFrom(const PointWithColor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:VCCSim.PointWithColor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void PointWithColor::InternalSwap(PointWithColor* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PointWithColor, _impl_.color_)
      + sizeof(PointWithColor::_impl_.color_)
      - PROTOBUF_FIELD_OFFSET(PointWithColor, _impl_.point_)>(
          reinterpret_cast<char*>(&_impl_.point_),
          reinterpret_cast<char*>(&other->_impl_.point_));
}

::google::protobuf::Metadata PointWithColor::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class PointCloudWithColor::_Internal {
 public:
};

PointCloudWithColor::PointCloudWithColor(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:VCCSim.PointCloudWithColor)
}
inline PROTOBUF_NDEBUG_INLINE PointCloudWithColor::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::VCCSim::PointCloudWithColor& from_msg)
      : data_{visibility, arena, from.data_},
        _cached_size_{0} {}

PointCloudWithColor::PointCloudWithColor(
    ::google::protobuf::Arena* arena,
    const PointCloudWithColor& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  PointCloudWithColor* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);

  // @@protoc_insertion_point(copy_constructor:VCCSim.PointCloudWithColor)
}
inline PROTOBUF_NDEBUG_INLINE PointCloudWithColor::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : data_{visibility, arena},
        _cached_size_{0} {}

inline void PointCloudWithColor::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
PointCloudWithColor::~PointCloudWithColor() {
  // @@protoc_insertion_point(destructor:VCCSim.PointCloudWithColor)
  SharedDtor(*this);
}
inline void PointCloudWithColor::SharedDtor(MessageLite& self) {
  PointCloudWithColor& this_ = static_cast<PointCloudWithColor&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* PointCloudWithColor::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) PointCloudWithColor(arena);
}
constexpr auto PointCloudWithColor::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(PointCloudWithColor, _impl_.data_) +
          decltype(PointCloudWithColor::_impl_.data_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::ZeroInit(
        sizeof(PointCloudWithColor), alignof(PointCloudWithColor), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&PointCloudWithColor::PlacementNew_,
                                 sizeof(PointCloudWithColor),
                                 alignof(PointCloudWithColor));
  }
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull PointCloudWithColor::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_PointCloudWithColor_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &PointCloudWithColor::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<PointCloudWithColor>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &PointCloudWithColor::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<PointCloudWithColor>(), &PointCloudWithColor::ByteSizeLong,
            &PointCloudWithColor::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(PointCloudWithColor, _impl_._cached_size_),
        false,
    },
    &PointCloudWithColor::kDescriptorMethods,
    &descriptor_table_VCCSim_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* PointCloudWithColor::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> PointCloudWithColor::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::VCCSim::PointCloudWithColor>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // repeated .VCCSim.PointWithColor data = 1;
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(PointCloudWithColor, _impl_.data_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .VCCSim.PointWithColor data = 1;
    {PROTOBUF_FIELD_OFFSET(PointCloudWithColor, _impl_.data_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::VCCSim::PointWithColor>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void PointCloudWithColor::Clear() {
// @@protoc_insertion_point(message_clear_start:VCCSim.PointCloudWithColor)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.data_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* PointCloudWithColor::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const PointCloudWithColor& this_ = static_cast<const PointCloudWithColor&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* PointCloudWithColor::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const PointCloudWithColor& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:VCCSim.PointCloudWithColor)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // repeated .VCCSim.PointWithColor data = 1;
          for (unsigned i = 0, n = static_cast<unsigned>(
                                   this_._internal_data_size());
               i < n; i++) {
            const auto& repfield = this_._internal_data().Get(i);
            target =
                ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                    1, repfield, repfield.GetCachedSize(),
                    target, stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:VCCSim.PointCloudWithColor)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t PointCloudWithColor::ByteSizeLong(const MessageLite& base) {
          const PointCloudWithColor& this_ = static_cast<const PointCloudWithColor&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t PointCloudWithColor::ByteSizeLong() const {
          const PointCloudWithColor& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:VCCSim.PointCloudWithColor)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated .VCCSim.PointWithColor data = 1;
            {
              total_size += 1UL * this_._internal_data_size();
              for (const auto& msg : this_._internal_data()) {
                total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
              }
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void PointCloudWithColor::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<PointCloudWithColor*>(&to_msg);
  auto& from = static_cast<const PointCloudWithColor&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:VCCSim.PointCloudWithColor)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_data()->MergeFrom(
      from._internal_data());
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void PointCloudWithColor::CopyFrom(const PointCloudWithColor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:VCCSim.PointCloudWithColor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void PointCloudWithColor::InternalSwap(PointCloudWithColor* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.data_.InternalSwap(&other->_impl_.data_);
}

::google::protobuf::Metadata PointCloudWithColor::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class EmptyRequest::_Internal {
 public:
};

EmptyRequest::EmptyRequest(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::internal::ZeroFieldsBase(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(arena_constructor:VCCSim.EmptyRequest)
}
EmptyRequest::EmptyRequest(
    ::google::protobuf::Arena* arena,
    const EmptyRequest& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::internal::ZeroFieldsBase(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  EmptyRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);

  // @@protoc_insertion_point(copy_constructor:VCCSim.EmptyRequest)
}

inline void* EmptyRequest::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) EmptyRequest(arena);
}
constexpr auto EmptyRequest::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(EmptyRequest),
                                            alignof(EmptyRequest));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull EmptyRequest::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_EmptyRequest_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &EmptyRequest::MergeImpl,
        ::google::protobuf::internal::ZeroFieldsBase::GetNewImpl<EmptyRequest>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &EmptyRequest::SharedDtor,
        ::google::protobuf::internal::ZeroFieldsBase::GetClearImpl<EmptyRequest>(), &EmptyRequest::ByteSizeLong,
            &EmptyRequest::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(EmptyRequest, _impl_._cached_size_),
        false,
    },
    &EmptyRequest::kDescriptorMethods,
    &descriptor_table_VCCSim_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* EmptyRequest::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 0, 0, 0, 2> EmptyRequest::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    0, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967295,  // skipmap
    offsetof(decltype(_table_), field_names),  // no field_entries
    0,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::VCCSim::EmptyRequest>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }},
  // no field_entries, or aux_entries
  {{
  }},
};








::google::protobuf::Metadata EmptyRequest::GetMetadata() const {
  return ::google::protobuf::internal::ZeroFieldsBase::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class Position::_Internal {
 public:
};

Position::Position(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:VCCSim.Position)
}
Position::Position(
    ::google::protobuf::Arena* arena, const Position& from)
    : Position(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE Position::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void Position::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, x_),
           0,
           offsetof(Impl_, z_) -
               offsetof(Impl_, x_) +
               sizeof(Impl_::z_));
}
Position::~Position() {
  // @@protoc_insertion_point(destructor:VCCSim.Position)
  SharedDtor(*this);
}
inline void Position::SharedDtor(MessageLite& self) {
  Position& this_ = static_cast<Position&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* Position::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) Position(arena);
}
constexpr auto Position::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(Position),
                                            alignof(Position));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull Position::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_Position_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &Position::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<Position>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &Position::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<Position>(), &Position::ByteSizeLong,
            &Position::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(Position, _impl_._cached_size_),
        false,
    },
    &Position::kDescriptorMethods,
    &descriptor_table_VCCSim_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* Position::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 0, 0, 2> Position::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::VCCSim::Position>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // float x = 1;
    {::_pbi::TcParser::FastF32S1,
     {13, 63, 0, PROTOBUF_FIELD_OFFSET(Position, _impl_.x_)}},
    // float y = 2;
    {::_pbi::TcParser::FastF32S1,
     {21, 63, 0, PROTOBUF_FIELD_OFFSET(Position, _impl_.y_)}},
    // float z = 3;
    {::_pbi::TcParser::FastF32S1,
     {29, 63, 0, PROTOBUF_FIELD_OFFSET(Position, _impl_.z_)}},
  }}, {{
    65535, 65535
  }}, {{
    // float x = 1;
    {PROTOBUF_FIELD_OFFSET(Position, _impl_.x_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float y = 2;
    {PROTOBUF_FIELD_OFFSET(Position, _impl_.y_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float z = 3;
    {PROTOBUF_FIELD_OFFSET(Position, _impl_.z_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
  }},
  // no aux_entries
  {{
  }},
};

PROTOBUF_NOINLINE void Position::Clear() {
// @@protoc_insertion_point(message_clear_start:VCCSim.Position)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.x_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.z_) -
      reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.z_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* Position::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const Position& this_ = static_cast<const Position&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* Position::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const Position& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:VCCSim.Position)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // float x = 1;
          if (::absl::bit_cast<::uint32_t>(this_._internal_x()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                1, this_._internal_x(), target);
          }

          // float y = 2;
          if (::absl::bit_cast<::uint32_t>(this_._internal_y()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                2, this_._internal_y(), target);
          }

          // float z = 3;
          if (::absl::bit_cast<::uint32_t>(this_._internal_z()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                3, this_._internal_z(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:VCCSim.Position)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t Position::ByteSizeLong(const MessageLite& base) {
          const Position& this_ = static_cast<const Position&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t Position::ByteSizeLong() const {
          const Position& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:VCCSim.Position)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // float x = 1;
            if (::absl::bit_cast<::uint32_t>(this_._internal_x()) != 0) {
              total_size += 5;
            }
            // float y = 2;
            if (::absl::bit_cast<::uint32_t>(this_._internal_y()) != 0) {
              total_size += 5;
            }
            // float z = 3;
            if (::absl::bit_cast<::uint32_t>(this_._internal_z()) != 0) {
              total_size += 5;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void Position::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<Position*>(&to_msg);
  auto& from = static_cast<const Position&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:VCCSim.Position)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (::absl::bit_cast<::uint32_t>(from._internal_x()) != 0) {
    _this->_impl_.x_ = from._impl_.x_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_y()) != 0) {
    _this->_impl_.y_ = from._impl_.y_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_z()) != 0) {
    _this->_impl_.z_ = from._impl_.z_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Position::CopyFrom(const Position& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:VCCSim.Position)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void Position::InternalSwap(Position* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Position, _impl_.z_)
      + sizeof(Position::_impl_.z_)
      - PROTOBUF_FIELD_OFFSET(Position, _impl_.x_)>(
          reinterpret_cast<char*>(&_impl_.x_),
          reinterpret_cast<char*>(&other->_impl_.x_));
}

::google::protobuf::Metadata Position::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class Pose::_Internal {
 public:
};

Pose::Pose(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:VCCSim.Pose)
}
Pose::Pose(
    ::google::protobuf::Arena* arena, const Pose& from)
    : Pose(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE Pose::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void Pose::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, x_),
           0,
           offsetof(Impl_, yaw_) -
               offsetof(Impl_, x_) +
               sizeof(Impl_::yaw_));
}
Pose::~Pose() {
  // @@protoc_insertion_point(destructor:VCCSim.Pose)
  SharedDtor(*this);
}
inline void Pose::SharedDtor(MessageLite& self) {
  Pose& this_ = static_cast<Pose&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* Pose::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) Pose(arena);
}
constexpr auto Pose::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(Pose),
                                            alignof(Pose));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull Pose::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_Pose_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &Pose::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<Pose>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &Pose::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<Pose>(), &Pose::ByteSizeLong,
            &Pose::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(Pose, _impl_._cached_size_),
        false,
    },
    &Pose::kDescriptorMethods,
    &descriptor_table_VCCSim_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* Pose::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 6, 0, 0, 2> Pose::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    6, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967232,  // skipmap
    offsetof(decltype(_table_), field_entries),
    6,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::VCCSim::Pose>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // float x = 1;
    {::_pbi::TcParser::FastF32S1,
     {13, 63, 0, PROTOBUF_FIELD_OFFSET(Pose, _impl_.x_)}},
    // float y = 2;
    {::_pbi::TcParser::FastF32S1,
     {21, 63, 0, PROTOBUF_FIELD_OFFSET(Pose, _impl_.y_)}},
    // float z = 3;
    {::_pbi::TcParser::FastF32S1,
     {29, 63, 0, PROTOBUF_FIELD_OFFSET(Pose, _impl_.z_)}},
    // float roll = 4;
    {::_pbi::TcParser::FastF32S1,
     {37, 63, 0, PROTOBUF_FIELD_OFFSET(Pose, _impl_.roll_)}},
    // float pitch = 5;
    {::_pbi::TcParser::FastF32S1,
     {45, 63, 0, PROTOBUF_FIELD_OFFSET(Pose, _impl_.pitch_)}},
    // float yaw = 6;
    {::_pbi::TcParser::FastF32S1,
     {53, 63, 0, PROTOBUF_FIELD_OFFSET(Pose, _impl_.yaw_)}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // float x = 1;
    {PROTOBUF_FIELD_OFFSET(Pose, _impl_.x_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float y = 2;
    {PROTOBUF_FIELD_OFFSET(Pose, _impl_.y_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float z = 3;
    {PROTOBUF_FIELD_OFFSET(Pose, _impl_.z_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float roll = 4;
    {PROTOBUF_FIELD_OFFSET(Pose, _impl_.roll_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float pitch = 5;
    {PROTOBUF_FIELD_OFFSET(Pose, _impl_.pitch_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float yaw = 6;
    {PROTOBUF_FIELD_OFFSET(Pose, _impl_.yaw_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
  }},
  // no aux_entries
  {{
  }},
};

PROTOBUF_NOINLINE void Pose::Clear() {
// @@protoc_insertion_point(message_clear_start:VCCSim.Pose)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.x_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.yaw_) -
      reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.yaw_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* Pose::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const Pose& this_ = static_cast<const Pose&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* Pose::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const Pose& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:VCCSim.Pose)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // float x = 1;
          if (::absl::bit_cast<::uint32_t>(this_._internal_x()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                1, this_._internal_x(), target);
          }

          // float y = 2;
          if (::absl::bit_cast<::uint32_t>(this_._internal_y()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                2, this_._internal_y(), target);
          }

          // float z = 3;
          if (::absl::bit_cast<::uint32_t>(this_._internal_z()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                3, this_._internal_z(), target);
          }

          // float roll = 4;
          if (::absl::bit_cast<::uint32_t>(this_._internal_roll()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                4, this_._internal_roll(), target);
          }

          // float pitch = 5;
          if (::absl::bit_cast<::uint32_t>(this_._internal_pitch()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                5, this_._internal_pitch(), target);
          }

          // float yaw = 6;
          if (::absl::bit_cast<::uint32_t>(this_._internal_yaw()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                6, this_._internal_yaw(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:VCCSim.Pose)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t Pose::ByteSizeLong(const MessageLite& base) {
          const Pose& this_ = static_cast<const Pose&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t Pose::ByteSizeLong() const {
          const Pose& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:VCCSim.Pose)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // float x = 1;
            if (::absl::bit_cast<::uint32_t>(this_._internal_x()) != 0) {
              total_size += 5;
            }
            // float y = 2;
            if (::absl::bit_cast<::uint32_t>(this_._internal_y()) != 0) {
              total_size += 5;
            }
            // float z = 3;
            if (::absl::bit_cast<::uint32_t>(this_._internal_z()) != 0) {
              total_size += 5;
            }
            // float roll = 4;
            if (::absl::bit_cast<::uint32_t>(this_._internal_roll()) != 0) {
              total_size += 5;
            }
            // float pitch = 5;
            if (::absl::bit_cast<::uint32_t>(this_._internal_pitch()) != 0) {
              total_size += 5;
            }
            // float yaw = 6;
            if (::absl::bit_cast<::uint32_t>(this_._internal_yaw()) != 0) {
              total_size += 5;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void Pose::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<Pose*>(&to_msg);
  auto& from = static_cast<const Pose&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:VCCSim.Pose)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (::absl::bit_cast<::uint32_t>(from._internal_x()) != 0) {
    _this->_impl_.x_ = from._impl_.x_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_y()) != 0) {
    _this->_impl_.y_ = from._impl_.y_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_z()) != 0) {
    _this->_impl_.z_ = from._impl_.z_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_roll()) != 0) {
    _this->_impl_.roll_ = from._impl_.roll_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_pitch()) != 0) {
    _this->_impl_.pitch_ = from._impl_.pitch_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_yaw()) != 0) {
    _this->_impl_.yaw_ = from._impl_.yaw_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Pose::CopyFrom(const Pose& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:VCCSim.Pose)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void Pose::InternalSwap(Pose* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Pose, _impl_.yaw_)
      + sizeof(Pose::_impl_.yaw_)
      - PROTOBUF_FIELD_OFFSET(Pose, _impl_.x_)>(
          reinterpret_cast<char*>(&_impl_.x_),
          reinterpret_cast<char*>(&other->_impl_.x_));
}

::google::protobuf::Metadata Pose::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class PoseOnlyYaw::_Internal {
 public:
};

PoseOnlyYaw::PoseOnlyYaw(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:VCCSim.PoseOnlyYaw)
}
PoseOnlyYaw::PoseOnlyYaw(
    ::google::protobuf::Arena* arena, const PoseOnlyYaw& from)
    : PoseOnlyYaw(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE PoseOnlyYaw::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void PoseOnlyYaw::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, x_),
           0,
           offsetof(Impl_, yaw_) -
               offsetof(Impl_, x_) +
               sizeof(Impl_::yaw_));
}
PoseOnlyYaw::~PoseOnlyYaw() {
  // @@protoc_insertion_point(destructor:VCCSim.PoseOnlyYaw)
  SharedDtor(*this);
}
inline void PoseOnlyYaw::SharedDtor(MessageLite& self) {
  PoseOnlyYaw& this_ = static_cast<PoseOnlyYaw&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* PoseOnlyYaw::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) PoseOnlyYaw(arena);
}
constexpr auto PoseOnlyYaw::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(PoseOnlyYaw),
                                            alignof(PoseOnlyYaw));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull PoseOnlyYaw::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_PoseOnlyYaw_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &PoseOnlyYaw::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<PoseOnlyYaw>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &PoseOnlyYaw::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<PoseOnlyYaw>(), &PoseOnlyYaw::ByteSizeLong,
            &PoseOnlyYaw::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(PoseOnlyYaw, _impl_._cached_size_),
        false,
    },
    &PoseOnlyYaw::kDescriptorMethods,
    &descriptor_table_VCCSim_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* PoseOnlyYaw::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 0, 0, 2> PoseOnlyYaw::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::VCCSim::PoseOnlyYaw>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // float yaw = 4;
    {::_pbi::TcParser::FastF32S1,
     {37, 63, 0, PROTOBUF_FIELD_OFFSET(PoseOnlyYaw, _impl_.yaw_)}},
    // float x = 1;
    {::_pbi::TcParser::FastF32S1,
     {13, 63, 0, PROTOBUF_FIELD_OFFSET(PoseOnlyYaw, _impl_.x_)}},
    // float y = 2;
    {::_pbi::TcParser::FastF32S1,
     {21, 63, 0, PROTOBUF_FIELD_OFFSET(PoseOnlyYaw, _impl_.y_)}},
    // float z = 3;
    {::_pbi::TcParser::FastF32S1,
     {29, 63, 0, PROTOBUF_FIELD_OFFSET(PoseOnlyYaw, _impl_.z_)}},
  }}, {{
    65535, 65535
  }}, {{
    // float x = 1;
    {PROTOBUF_FIELD_OFFSET(PoseOnlyYaw, _impl_.x_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float y = 2;
    {PROTOBUF_FIELD_OFFSET(PoseOnlyYaw, _impl_.y_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float z = 3;
    {PROTOBUF_FIELD_OFFSET(PoseOnlyYaw, _impl_.z_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float yaw = 4;
    {PROTOBUF_FIELD_OFFSET(PoseOnlyYaw, _impl_.yaw_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
  }},
  // no aux_entries
  {{
  }},
};

PROTOBUF_NOINLINE void PoseOnlyYaw::Clear() {
// @@protoc_insertion_point(message_clear_start:VCCSim.PoseOnlyYaw)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.x_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.yaw_) -
      reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.yaw_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* PoseOnlyYaw::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const PoseOnlyYaw& this_ = static_cast<const PoseOnlyYaw&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* PoseOnlyYaw::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const PoseOnlyYaw& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:VCCSim.PoseOnlyYaw)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // float x = 1;
          if (::absl::bit_cast<::uint32_t>(this_._internal_x()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                1, this_._internal_x(), target);
          }

          // float y = 2;
          if (::absl::bit_cast<::uint32_t>(this_._internal_y()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                2, this_._internal_y(), target);
          }

          // float z = 3;
          if (::absl::bit_cast<::uint32_t>(this_._internal_z()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                3, this_._internal_z(), target);
          }

          // float yaw = 4;
          if (::absl::bit_cast<::uint32_t>(this_._internal_yaw()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                4, this_._internal_yaw(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:VCCSim.PoseOnlyYaw)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t PoseOnlyYaw::ByteSizeLong(const MessageLite& base) {
          const PoseOnlyYaw& this_ = static_cast<const PoseOnlyYaw&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t PoseOnlyYaw::ByteSizeLong() const {
          const PoseOnlyYaw& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:VCCSim.PoseOnlyYaw)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // float x = 1;
            if (::absl::bit_cast<::uint32_t>(this_._internal_x()) != 0) {
              total_size += 5;
            }
            // float y = 2;
            if (::absl::bit_cast<::uint32_t>(this_._internal_y()) != 0) {
              total_size += 5;
            }
            // float z = 3;
            if (::absl::bit_cast<::uint32_t>(this_._internal_z()) != 0) {
              total_size += 5;
            }
            // float yaw = 4;
            if (::absl::bit_cast<::uint32_t>(this_._internal_yaw()) != 0) {
              total_size += 5;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void PoseOnlyYaw::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<PoseOnlyYaw*>(&to_msg);
  auto& from = static_cast<const PoseOnlyYaw&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:VCCSim.PoseOnlyYaw)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (::absl::bit_cast<::uint32_t>(from._internal_x()) != 0) {
    _this->_impl_.x_ = from._impl_.x_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_y()) != 0) {
    _this->_impl_.y_ = from._impl_.y_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_z()) != 0) {
    _this->_impl_.z_ = from._impl_.z_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_yaw()) != 0) {
    _this->_impl_.yaw_ = from._impl_.yaw_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void PoseOnlyYaw::CopyFrom(const PoseOnlyYaw& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:VCCSim.PoseOnlyYaw)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void PoseOnlyYaw::InternalSwap(PoseOnlyYaw* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PoseOnlyYaw, _impl_.yaw_)
      + sizeof(PoseOnlyYaw::_impl_.yaw_)
      - PROTOBUF_FIELD_OFFSET(PoseOnlyYaw, _impl_.x_)>(
          reinterpret_cast<char*>(&_impl_.x_),
          reinterpret_cast<char*>(&other->_impl_.x_));
}

::google::protobuf::Metadata PoseOnlyYaw::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class twist::_Internal {
 public:
};

twist::twist(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:VCCSim.twist)
}
twist::twist(
    ::google::protobuf::Arena* arena, const twist& from)
    : twist(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE twist::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void twist::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, linear_x_),
           0,
           offsetof(Impl_, angular_z_) -
               offsetof(Impl_, linear_x_) +
               sizeof(Impl_::angular_z_));
}
twist::~twist() {
  // @@protoc_insertion_point(destructor:VCCSim.twist)
  SharedDtor(*this);
}
inline void twist::SharedDtor(MessageLite& self) {
  twist& this_ = static_cast<twist&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* twist::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) twist(arena);
}
constexpr auto twist::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(twist),
                                            alignof(twist));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull twist::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_twist_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &twist::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<twist>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &twist::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<twist>(), &twist::ByteSizeLong,
            &twist::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(twist, _impl_._cached_size_),
        false,
    },
    &twist::kDescriptorMethods,
    &descriptor_table_VCCSim_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* twist::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 6, 0, 0, 2> twist::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    6, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967232,  // skipmap
    offsetof(decltype(_table_), field_entries),
    6,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::VCCSim::twist>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // float linear_x = 1;
    {::_pbi::TcParser::FastF32S1,
     {13, 63, 0, PROTOBUF_FIELD_OFFSET(twist, _impl_.linear_x_)}},
    // float linear_y = 2;
    {::_pbi::TcParser::FastF32S1,
     {21, 63, 0, PROTOBUF_FIELD_OFFSET(twist, _impl_.linear_y_)}},
    // float linear_z = 3;
    {::_pbi::TcParser::FastF32S1,
     {29, 63, 0, PROTOBUF_FIELD_OFFSET(twist, _impl_.linear_z_)}},
    // float angular_x = 4;
    {::_pbi::TcParser::FastF32S1,
     {37, 63, 0, PROTOBUF_FIELD_OFFSET(twist, _impl_.angular_x_)}},
    // float angular_y = 5;
    {::_pbi::TcParser::FastF32S1,
     {45, 63, 0, PROTOBUF_FIELD_OFFSET(twist, _impl_.angular_y_)}},
    // float angular_z = 6;
    {::_pbi::TcParser::FastF32S1,
     {53, 63, 0, PROTOBUF_FIELD_OFFSET(twist, _impl_.angular_z_)}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // float linear_x = 1;
    {PROTOBUF_FIELD_OFFSET(twist, _impl_.linear_x_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float linear_y = 2;
    {PROTOBUF_FIELD_OFFSET(twist, _impl_.linear_y_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float linear_z = 3;
    {PROTOBUF_FIELD_OFFSET(twist, _impl_.linear_z_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float angular_x = 4;
    {PROTOBUF_FIELD_OFFSET(twist, _impl_.angular_x_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float angular_y = 5;
    {PROTOBUF_FIELD_OFFSET(twist, _impl_.angular_y_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float angular_z = 6;
    {PROTOBUF_FIELD_OFFSET(twist, _impl_.angular_z_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
  }},
  // no aux_entries
  {{
  }},
};

PROTOBUF_NOINLINE void twist::Clear() {
// @@protoc_insertion_point(message_clear_start:VCCSim.twist)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.linear_x_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.angular_z_) -
      reinterpret_cast<char*>(&_impl_.linear_x_)) + sizeof(_impl_.angular_z_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* twist::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const twist& this_ = static_cast<const twist&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* twist::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const twist& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:VCCSim.twist)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // float linear_x = 1;
          if (::absl::bit_cast<::uint32_t>(this_._internal_linear_x()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                1, this_._internal_linear_x(), target);
          }

          // float linear_y = 2;
          if (::absl::bit_cast<::uint32_t>(this_._internal_linear_y()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                2, this_._internal_linear_y(), target);
          }

          // float linear_z = 3;
          if (::absl::bit_cast<::uint32_t>(this_._internal_linear_z()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                3, this_._internal_linear_z(), target);
          }

          // float angular_x = 4;
          if (::absl::bit_cast<::uint32_t>(this_._internal_angular_x()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                4, this_._internal_angular_x(), target);
          }

          // float angular_y = 5;
          if (::absl::bit_cast<::uint32_t>(this_._internal_angular_y()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                5, this_._internal_angular_y(), target);
          }

          // float angular_z = 6;
          if (::absl::bit_cast<::uint32_t>(this_._internal_angular_z()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                6, this_._internal_angular_z(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:VCCSim.twist)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t twist::ByteSizeLong(const MessageLite& base) {
          const twist& this_ = static_cast<const twist&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t twist::ByteSizeLong() const {
          const twist& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:VCCSim.twist)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // float linear_x = 1;
            if (::absl::bit_cast<::uint32_t>(this_._internal_linear_x()) != 0) {
              total_size += 5;
            }
            // float linear_y = 2;
            if (::absl::bit_cast<::uint32_t>(this_._internal_linear_y()) != 0) {
              total_size += 5;
            }
            // float linear_z = 3;
            if (::absl::bit_cast<::uint32_t>(this_._internal_linear_z()) != 0) {
              total_size += 5;
            }
            // float angular_x = 4;
            if (::absl::bit_cast<::uint32_t>(this_._internal_angular_x()) != 0) {
              total_size += 5;
            }
            // float angular_y = 5;
            if (::absl::bit_cast<::uint32_t>(this_._internal_angular_y()) != 0) {
              total_size += 5;
            }
            // float angular_z = 6;
            if (::absl::bit_cast<::uint32_t>(this_._internal_angular_z()) != 0) {
              total_size += 5;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void twist::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<twist*>(&to_msg);
  auto& from = static_cast<const twist&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:VCCSim.twist)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (::absl::bit_cast<::uint32_t>(from._internal_linear_x()) != 0) {
    _this->_impl_.linear_x_ = from._impl_.linear_x_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_linear_y()) != 0) {
    _this->_impl_.linear_y_ = from._impl_.linear_y_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_linear_z()) != 0) {
    _this->_impl_.linear_z_ = from._impl_.linear_z_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_angular_x()) != 0) {
    _this->_impl_.angular_x_ = from._impl_.angular_x_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_angular_y()) != 0) {
    _this->_impl_.angular_y_ = from._impl_.angular_y_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_angular_z()) != 0) {
    _this->_impl_.angular_z_ = from._impl_.angular_z_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void twist::CopyFrom(const twist& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:VCCSim.twist)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void twist::InternalSwap(twist* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(twist, _impl_.angular_z_)
      + sizeof(twist::_impl_.angular_z_)
      - PROTOBUF_FIELD_OFFSET(twist, _impl_.linear_x_)>(
          reinterpret_cast<char*>(&_impl_.linear_x_),
          reinterpret_cast<char*>(&other->_impl_.linear_x_));
}

::google::protobuf::Metadata twist::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class Odometry::_Internal {
 public:
  using HasBits =
      decltype(std::declval<Odometry>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(Odometry, _impl_._has_bits_);
};

Odometry::Odometry(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:VCCSim.Odometry)
}
inline PROTOBUF_NDEBUG_INLINE Odometry::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::VCCSim::Odometry& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

Odometry::Odometry(
    ::google::protobuf::Arena* arena,
    const Odometry& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  Odometry* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.pose_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::VCCSim::Pose>(
                              arena, *from._impl_.pose_)
                        : nullptr;
  _impl_.twist_ = (cached_has_bits & 0x00000002u) ? ::google::protobuf::Message::CopyConstruct<::VCCSim::twist>(
                              arena, *from._impl_.twist_)
                        : nullptr;

  // @@protoc_insertion_point(copy_constructor:VCCSim.Odometry)
}
inline PROTOBUF_NDEBUG_INLINE Odometry::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void Odometry::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, pose_),
           0,
           offsetof(Impl_, twist_) -
               offsetof(Impl_, pose_) +
               sizeof(Impl_::twist_));
}
Odometry::~Odometry() {
  // @@protoc_insertion_point(destructor:VCCSim.Odometry)
  SharedDtor(*this);
}
inline void Odometry::SharedDtor(MessageLite& self) {
  Odometry& this_ = static_cast<Odometry&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.pose_;
  delete this_._impl_.twist_;
  this_._impl_.~Impl_();
}

inline void* Odometry::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) Odometry(arena);
}
constexpr auto Odometry::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(Odometry),
                                            alignof(Odometry));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull Odometry::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_Odometry_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &Odometry::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<Odometry>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &Odometry::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<Odometry>(), &Odometry::ByteSizeLong,
            &Odometry::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(Odometry, _impl_._cached_size_),
        false,
    },
    &Odometry::kDescriptorMethods,
    &descriptor_table_VCCSim_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* Odometry::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 2, 0, 2> Odometry::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Odometry, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::VCCSim::Odometry>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .VCCSim.twist twist = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(Odometry, _impl_.twist_)}},
    // .VCCSim.Pose pose = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(Odometry, _impl_.pose_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .VCCSim.Pose pose = 1;
    {PROTOBUF_FIELD_OFFSET(Odometry, _impl_.pose_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .VCCSim.twist twist = 2;
    {PROTOBUF_FIELD_OFFSET(Odometry, _impl_.twist_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::VCCSim::Pose>()},
    {::_pbi::TcParser::GetTable<::VCCSim::twist>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void Odometry::Clear() {
// @@protoc_insertion_point(message_clear_start:VCCSim.Odometry)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.pose_ != nullptr);
      _impl_.pose_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.twist_ != nullptr);
      _impl_.twist_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* Odometry::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const Odometry& this_ = static_cast<const Odometry&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* Odometry::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const Odometry& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:VCCSim.Odometry)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // .VCCSim.Pose pose = 1;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1, *this_._impl_.pose_, this_._impl_.pose_->GetCachedSize(), target,
                stream);
          }

          // .VCCSim.twist twist = 2;
          if (cached_has_bits & 0x00000002u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                2, *this_._impl_.twist_, this_._impl_.twist_->GetCachedSize(), target,
                stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:VCCSim.Odometry)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t Odometry::ByteSizeLong(const MessageLite& base) {
          const Odometry& this_ = static_cast<const Odometry&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t Odometry::ByteSizeLong() const {
          const Odometry& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:VCCSim.Odometry)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
          cached_has_bits = this_._impl_._has_bits_[0];
          if (cached_has_bits & 0x00000003u) {
            // .VCCSim.Pose pose = 1;
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.pose_);
            }
            // .VCCSim.twist twist = 2;
            if (cached_has_bits & 0x00000002u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.twist_);
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void Odometry::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<Odometry*>(&to_msg);
  auto& from = static_cast<const Odometry&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:VCCSim.Odometry)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(from._impl_.pose_ != nullptr);
      if (_this->_impl_.pose_ == nullptr) {
        _this->_impl_.pose_ =
            ::google::protobuf::Message::CopyConstruct<::VCCSim::Pose>(arena, *from._impl_.pose_);
      } else {
        _this->_impl_.pose_->MergeFrom(*from._impl_.pose_);
      }
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(from._impl_.twist_ != nullptr);
      if (_this->_impl_.twist_ == nullptr) {
        _this->_impl_.twist_ =
            ::google::protobuf::Message::CopyConstruct<::VCCSim::twist>(arena, *from._impl_.twist_);
      } else {
        _this->_impl_.twist_->MergeFrom(*from._impl_.twist_);
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Odometry::CopyFrom(const Odometry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:VCCSim.Odometry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void Odometry::InternalSwap(Odometry* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Odometry, _impl_.twist_)
      + sizeof(Odometry::_impl_.twist_)
      - PROTOBUF_FIELD_OFFSET(Odometry, _impl_.pose_)>(
          reinterpret_cast<char*>(&_impl_.pose_),
          reinterpret_cast<char*>(&other->_impl_.pose_));
}

::google::protobuf::Metadata Odometry::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class Status::_Internal {
 public:
};

Status::Status(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:VCCSim.Status)
}
Status::Status(
    ::google::protobuf::Arena* arena, const Status& from)
    : Status(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE Status::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void Status::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.status_ = {};
}
Status::~Status() {
  // @@protoc_insertion_point(destructor:VCCSim.Status)
  SharedDtor(*this);
}
inline void Status::SharedDtor(MessageLite& self) {
  Status& this_ = static_cast<Status&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* Status::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) Status(arena);
}
constexpr auto Status::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(Status),
                                            alignof(Status));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull Status::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_Status_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &Status::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<Status>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &Status::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<Status>(), &Status::ByteSizeLong,
            &Status::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(Status, _impl_._cached_size_),
        false,
    },
    &Status::kDescriptorMethods,
    &descriptor_table_VCCSim_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* Status::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 0, 2> Status::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::VCCSim::Status>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // bool status = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(Status, _impl_.status_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(Status, _impl_.status_)}},
  }}, {{
    65535, 65535
  }}, {{
    // bool status = 1;
    {PROTOBUF_FIELD_OFFSET(Status, _impl_.status_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
  }},
  // no aux_entries
  {{
  }},
};

PROTOBUF_NOINLINE void Status::Clear() {
// @@protoc_insertion_point(message_clear_start:VCCSim.Status)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.status_ = false;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* Status::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const Status& this_ = static_cast<const Status&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* Status::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const Status& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:VCCSim.Status)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // bool status = 1;
          if (this_._internal_status() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                1, this_._internal_status(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:VCCSim.Status)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t Status::ByteSizeLong(const MessageLite& base) {
          const Status& this_ = static_cast<const Status&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t Status::ByteSizeLong() const {
          const Status& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:VCCSim.Status)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

           {
            // bool status = 1;
            if (this_._internal_status() != 0) {
              total_size += 2;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void Status::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<Status*>(&to_msg);
  auto& from = static_cast<const Status&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:VCCSim.Status)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_status() != 0) {
    _this->_impl_.status_ = from._impl_.status_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Status::CopyFrom(const Status& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:VCCSim.Status)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void Status::InternalSwap(Status* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
        swap(_impl_.status_, other->_impl_.status_);
}

::google::protobuf::Metadata Status::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class RobotName::_Internal {
 public:
};

RobotName::RobotName(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:VCCSim.RobotName)
}
inline PROTOBUF_NDEBUG_INLINE RobotName::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::VCCSim::RobotName& from_msg)
      : name_(arena, from.name_),
        _cached_size_{0} {}

RobotName::RobotName(
    ::google::protobuf::Arena* arena,
    const RobotName& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  RobotName* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);

  // @@protoc_insertion_point(copy_constructor:VCCSim.RobotName)
}
inline PROTOBUF_NDEBUG_INLINE RobotName::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : name_(arena),
        _cached_size_{0} {}

inline void RobotName::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
RobotName::~RobotName() {
  // @@protoc_insertion_point(destructor:VCCSim.RobotName)
  SharedDtor(*this);
}
inline void RobotName::SharedDtor(MessageLite& self) {
  RobotName& this_ = static_cast<RobotName&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.name_.Destroy();
  this_._impl_.~Impl_();
}

inline void* RobotName::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) RobotName(arena);
}
constexpr auto RobotName::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(RobotName),
                                            alignof(RobotName));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull RobotName::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_RobotName_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &RobotName::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<RobotName>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &RobotName::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<RobotName>(), &RobotName::ByteSizeLong,
            &RobotName::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(RobotName, _impl_._cached_size_),
        false,
    },
    &RobotName::kDescriptorMethods,
    &descriptor_table_VCCSim_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* RobotName::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 29, 2> RobotName::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::VCCSim::RobotName>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // string name = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(RobotName, _impl_.name_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string name = 1;
    {PROTOBUF_FIELD_OFFSET(RobotName, _impl_.name_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\20\4\0\0\0\0\0\0"
    "VCCSim.RobotName"
    "name"
  }},
};

PROTOBUF_NOINLINE void RobotName::Clear() {
// @@protoc_insertion_point(message_clear_start:VCCSim.RobotName)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* RobotName::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const RobotName& this_ = static_cast<const RobotName&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* RobotName::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const RobotName& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:VCCSim.RobotName)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // string name = 1;
          if (!this_._internal_name().empty()) {
            const std::string& _s = this_._internal_name();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "VCCSim.RobotName.name");
            target = stream->WriteStringMaybeAliased(1, _s, target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:VCCSim.RobotName)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t RobotName::ByteSizeLong(const MessageLite& base) {
          const RobotName& this_ = static_cast<const RobotName&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t RobotName::ByteSizeLong() const {
          const RobotName& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:VCCSim.RobotName)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

           {
            // string name = 1;
            if (!this_._internal_name().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_name());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void RobotName::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<RobotName*>(&to_msg);
  auto& from = static_cast<const RobotName&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:VCCSim.RobotName)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void RobotName::CopyFrom(const RobotName& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:VCCSim.RobotName)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void RobotName::InternalSwap(RobotName* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, &other->_impl_.name_, arena);
}

::google::protobuf::Metadata RobotName::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class IndexedCamera::_Internal {
 public:
  using HasBits =
      decltype(std::declval<IndexedCamera>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(IndexedCamera, _impl_._has_bits_);
};

IndexedCamera::IndexedCamera(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:VCCSim.IndexedCamera)
}
inline PROTOBUF_NDEBUG_INLINE IndexedCamera::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::VCCSim::IndexedCamera& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

IndexedCamera::IndexedCamera(
    ::google::protobuf::Arena* arena,
    const IndexedCamera& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  IndexedCamera* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.robot_name_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::VCCSim::RobotName>(
                              arena, *from._impl_.robot_name_)
                        : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, index_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, index_),
           offsetof(Impl_, format_) -
               offsetof(Impl_, index_) +
               sizeof(Impl_::format_));

  // @@protoc_insertion_point(copy_constructor:VCCSim.IndexedCamera)
}
inline PROTOBUF_NDEBUG_INLINE IndexedCamera::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void IndexedCamera::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, robot_name_),
           0,
           offsetof(Impl_, format_) -
               offsetof(Impl_, robot_name_) +
               sizeof(Impl_::format_));
}
IndexedCamera::~IndexedCamera() {
  // @@protoc_insertion_point(destructor:VCCSim.IndexedCamera)
  SharedDtor(*this);
}
inline void IndexedCamera::SharedDtor(MessageLite& self) {
  IndexedCamera& this_ = static_cast<IndexedCamera&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.robot_name_;
  this_._impl_.~Impl_();
}

inline void* IndexedCamera::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) IndexedCamera(arena);
}
constexpr auto IndexedCamera::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(IndexedCamera),
                                            alignof(IndexedCamera));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull IndexedCamera::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_IndexedCamera_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &IndexedCamera::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<IndexedCamera>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &IndexedCamera::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<IndexedCamera>(), &IndexedCamera::ByteSizeLong,
            &IndexedCamera::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(IndexedCamera, _impl_._cached_size_),
        false,
    },
    &IndexedCamera::kDescriptorMethods,
    &descriptor_table_VCCSim_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* IndexedCamera::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 1, 0, 2> IndexedCamera::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(IndexedCamera, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::VCCSim::IndexedCamera>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .VCCSim.RobotName robot_name = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(IndexedCamera, _impl_.robot_name_)}},
    // uint32 index = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(IndexedCamera, _impl_.index_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(IndexedCamera, _impl_.index_)}},
    // .VCCSim.Format format = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(IndexedCamera, _impl_.format_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(IndexedCamera, _impl_.format_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .VCCSim.RobotName robot_name = 1;
    {PROTOBUF_FIELD_OFFSET(IndexedCamera, _impl_.robot_name_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // uint32 index = 2;
    {PROTOBUF_FIELD_OFFSET(IndexedCamera, _impl_.index_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // .VCCSim.Format format = 3;
    {PROTOBUF_FIELD_OFFSET(IndexedCamera, _impl_.format_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
  }}, {{
    {::_pbi::TcParser::GetTable<::VCCSim::RobotName>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void IndexedCamera::Clear() {
// @@protoc_insertion_point(message_clear_start:VCCSim.IndexedCamera)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.robot_name_ != nullptr);
    _impl_.robot_name_->Clear();
  }
  ::memset(&_impl_.index_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.format_) -
      reinterpret_cast<char*>(&_impl_.index_)) + sizeof(_impl_.format_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* IndexedCamera::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const IndexedCamera& this_ = static_cast<const IndexedCamera&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* IndexedCamera::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const IndexedCamera& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:VCCSim.IndexedCamera)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // .VCCSim.RobotName robot_name = 1;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1, *this_._impl_.robot_name_, this_._impl_.robot_name_->GetCachedSize(), target,
                stream);
          }

          // uint32 index = 2;
          if (this_._internal_index() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
                2, this_._internal_index(), target);
          }

          // .VCCSim.Format format = 3;
          if (this_._internal_format() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                3, this_._internal_format(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:VCCSim.IndexedCamera)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t IndexedCamera::ByteSizeLong(const MessageLite& base) {
          const IndexedCamera& this_ = static_cast<const IndexedCamera&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t IndexedCamera::ByteSizeLong() const {
          const IndexedCamera& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:VCCSim.IndexedCamera)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // .VCCSim.RobotName robot_name = 1;
            cached_has_bits = this_._impl_._has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.robot_name_);
            }
          }
           {
            // uint32 index = 2;
            if (this_._internal_index() != 0) {
              total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
                  this_._internal_index());
            }
            // .VCCSim.Format format = 3;
            if (this_._internal_format() != 0) {
              total_size += 1 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_format());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void IndexedCamera::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<IndexedCamera*>(&to_msg);
  auto& from = static_cast<const IndexedCamera&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:VCCSim.IndexedCamera)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(from._impl_.robot_name_ != nullptr);
    if (_this->_impl_.robot_name_ == nullptr) {
      _this->_impl_.robot_name_ =
          ::google::protobuf::Message::CopyConstruct<::VCCSim::RobotName>(arena, *from._impl_.robot_name_);
    } else {
      _this->_impl_.robot_name_->MergeFrom(*from._impl_.robot_name_);
    }
  }
  if (from._internal_index() != 0) {
    _this->_impl_.index_ = from._impl_.index_;
  }
  if (from._internal_format() != 0) {
    _this->_impl_.format_ = from._impl_.format_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void IndexedCamera::CopyFrom(const IndexedCamera& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:VCCSim.IndexedCamera)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void IndexedCamera::InternalSwap(IndexedCamera* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IndexedCamera, _impl_.format_)
      + sizeof(IndexedCamera::_impl_.format_)
      - PROTOBUF_FIELD_OFFSET(IndexedCamera, _impl_.robot_name_)>(
          reinterpret_cast<char*>(&_impl_.robot_name_),
          reinterpret_cast<char*>(&other->_impl_.robot_name_));
}

::google::protobuf::Metadata IndexedCamera::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class ImageSize::_Internal {
 public:
};

ImageSize::ImageSize(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:VCCSim.ImageSize)
}
ImageSize::ImageSize(
    ::google::protobuf::Arena* arena, const ImageSize& from)
    : ImageSize(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE ImageSize::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void ImageSize::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, width_),
           0,
           offsetof(Impl_, height_) -
               offsetof(Impl_, width_) +
               sizeof(Impl_::height_));
}
ImageSize::~ImageSize() {
  // @@protoc_insertion_point(destructor:VCCSim.ImageSize)
  SharedDtor(*this);
}
inline void ImageSize::SharedDtor(MessageLite& self) {
  ImageSize& this_ = static_cast<ImageSize&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* ImageSize::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) ImageSize(arena);
}
constexpr auto ImageSize::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(ImageSize),
                                            alignof(ImageSize));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull ImageSize::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_ImageSize_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &ImageSize::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<ImageSize>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &ImageSize::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<ImageSize>(), &ImageSize::ByteSizeLong,
            &ImageSize::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(ImageSize, _impl_._cached_size_),
        false,
    },
    &ImageSize::kDescriptorMethods,
    &descriptor_table_VCCSim_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* ImageSize::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 0, 2> ImageSize::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::VCCSim::ImageSize>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // uint32 height = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(ImageSize, _impl_.height_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(ImageSize, _impl_.height_)}},
    // uint32 width = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(ImageSize, _impl_.width_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(ImageSize, _impl_.width_)}},
  }}, {{
    65535, 65535
  }}, {{
    // uint32 width = 1;
    {PROTOBUF_FIELD_OFFSET(ImageSize, _impl_.width_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // uint32 height = 2;
    {PROTOBUF_FIELD_OFFSET(ImageSize, _impl_.height_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
  }},
  // no aux_entries
  {{
  }},
};

PROTOBUF_NOINLINE void ImageSize::Clear() {
// @@protoc_insertion_point(message_clear_start:VCCSim.ImageSize)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.width_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.height_) -
      reinterpret_cast<char*>(&_impl_.width_)) + sizeof(_impl_.height_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* ImageSize::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const ImageSize& this_ = static_cast<const ImageSize&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* ImageSize::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const ImageSize& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:VCCSim.ImageSize)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // uint32 width = 1;
          if (this_._internal_width() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
                1, this_._internal_width(), target);
          }

          // uint32 height = 2;
          if (this_._internal_height() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
                2, this_._internal_height(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:VCCSim.ImageSize)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t ImageSize::ByteSizeLong(const MessageLite& base) {
          const ImageSize& this_ = static_cast<const ImageSize&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t ImageSize::ByteSizeLong() const {
          const ImageSize& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:VCCSim.ImageSize)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // uint32 width = 1;
            if (this_._internal_width() != 0) {
              total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
                  this_._internal_width());
            }
            // uint32 height = 2;
            if (this_._internal_height() != 0) {
              total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
                  this_._internal_height());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void ImageSize::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<ImageSize*>(&to_msg);
  auto& from = static_cast<const ImageSize&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:VCCSim.ImageSize)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_width() != 0) {
    _this->_impl_.width_ = from._impl_.width_;
  }
  if (from._internal_height() != 0) {
    _this->_impl_.height_ = from._impl_.height_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ImageSize::CopyFrom(const ImageSize& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:VCCSim.ImageSize)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void ImageSize::InternalSwap(ImageSize* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ImageSize, _impl_.height_)
      + sizeof(ImageSize::_impl_.height_)
      - PROTOBUF_FIELD_OFFSET(ImageSize, _impl_.width_)>(
          reinterpret_cast<char*>(&_impl_.width_),
          reinterpret_cast<char*>(&other->_impl_.width_));
}

::google::protobuf::Metadata ImageSize::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class MeshData::_Internal {
 public:
  using HasBits =
      decltype(std::declval<MeshData>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(MeshData, _impl_._has_bits_);
};

MeshData::MeshData(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:VCCSim.MeshData)
}
inline PROTOBUF_NDEBUG_INLINE MeshData::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::VCCSim::MeshData& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        data_(arena, from.data_) {}

MeshData::MeshData(
    ::google::protobuf::Arena* arena,
    const MeshData& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  MeshData* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.transform_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::VCCSim::Pose>(
                              arena, *from._impl_.transform_)
                        : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, format_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, format_),
           offsetof(Impl_, simplified_) -
               offsetof(Impl_, format_) +
               sizeof(Impl_::simplified_));

  // @@protoc_insertion_point(copy_constructor:VCCSim.MeshData)
}
inline PROTOBUF_NDEBUG_INLINE MeshData::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        data_(arena) {}

inline void MeshData::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, transform_),
           0,
           offsetof(Impl_, simplified_) -
               offsetof(Impl_, transform_) +
               sizeof(Impl_::simplified_));
}
MeshData::~MeshData() {
  // @@protoc_insertion_point(destructor:VCCSim.MeshData)
  SharedDtor(*this);
}
inline void MeshData::SharedDtor(MessageLite& self) {
  MeshData& this_ = static_cast<MeshData&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.data_.Destroy();
  delete this_._impl_.transform_;
  this_._impl_.~Impl_();
}

inline void* MeshData::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) MeshData(arena);
}
constexpr auto MeshData::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(MeshData),
                                            alignof(MeshData));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull MeshData::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_MeshData_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &MeshData::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<MeshData>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &MeshData::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<MeshData>(), &MeshData::ByteSizeLong,
            &MeshData::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(MeshData, _impl_._cached_size_),
        false,
    },
    &MeshData::kDescriptorMethods,
    &descriptor_table_VCCSim_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* MeshData::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 5, 1, 0, 2> MeshData::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(MeshData, _impl_._has_bits_),
    0, // no _extensions_
    5, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967264,  // skipmap
    offsetof(decltype(_table_), field_entries),
    5,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::VCCSim::MeshData>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // bytes data = 1;
    {::_pbi::TcParser::FastBS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(MeshData, _impl_.data_)}},
    // uint32 format = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(MeshData, _impl_.format_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(MeshData, _impl_.format_)}},
    // uint32 version = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(MeshData, _impl_.version_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(MeshData, _impl_.version_)}},
    // bool simplified = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(MeshData, _impl_.simplified_), 63>(),
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(MeshData, _impl_.simplified_)}},
    // .VCCSim.Pose transform = 5;
    {::_pbi::TcParser::FastMtS1,
     {42, 0, 0, PROTOBUF_FIELD_OFFSET(MeshData, _impl_.transform_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // bytes data = 1;
    {PROTOBUF_FIELD_OFFSET(MeshData, _impl_.data_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBytes | ::_fl::kRepAString)},
    // uint32 format = 2;
    {PROTOBUF_FIELD_OFFSET(MeshData, _impl_.format_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // uint32 version = 3;
    {PROTOBUF_FIELD_OFFSET(MeshData, _impl_.version_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // bool simplified = 4;
    {PROTOBUF_FIELD_OFFSET(MeshData, _impl_.simplified_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // .VCCSim.Pose transform = 5;
    {PROTOBUF_FIELD_OFFSET(MeshData, _impl_.transform_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::VCCSim::Pose>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void MeshData::Clear() {
// @@protoc_insertion_point(message_clear_start:VCCSim.MeshData)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.data_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.transform_ != nullptr);
    _impl_.transform_->Clear();
  }
  ::memset(&_impl_.format_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.simplified_) -
      reinterpret_cast<char*>(&_impl_.format_)) + sizeof(_impl_.simplified_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* MeshData::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const MeshData& this_ = static_cast<const MeshData&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* MeshData::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const MeshData& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:VCCSim.MeshData)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // bytes data = 1;
          if (!this_._internal_data().empty()) {
            const std::string& _s = this_._internal_data();
            target = stream->WriteBytesMaybeAliased(1, _s, target);
          }

          // uint32 format = 2;
          if (this_._internal_format() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
                2, this_._internal_format(), target);
          }

          // uint32 version = 3;
          if (this_._internal_version() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
                3, this_._internal_version(), target);
          }

          // bool simplified = 4;
          if (this_._internal_simplified() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                4, this_._internal_simplified(), target);
          }

          cached_has_bits = this_._impl_._has_bits_[0];
          // .VCCSim.Pose transform = 5;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                5, *this_._impl_.transform_, this_._impl_.transform_->GetCachedSize(), target,
                stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:VCCSim.MeshData)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t MeshData::ByteSizeLong(const MessageLite& base) {
          const MeshData& this_ = static_cast<const MeshData&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t MeshData::ByteSizeLong() const {
          const MeshData& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:VCCSim.MeshData)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // bytes data = 1;
            if (!this_._internal_data().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                              this_._internal_data());
            }
          }
           {
            // .VCCSim.Pose transform = 5;
            cached_has_bits = this_._impl_._has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.transform_);
            }
          }
           {
            // uint32 format = 2;
            if (this_._internal_format() != 0) {
              total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
                  this_._internal_format());
            }
            // uint32 version = 3;
            if (this_._internal_version() != 0) {
              total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
                  this_._internal_version());
            }
            // bool simplified = 4;
            if (this_._internal_simplified() != 0) {
              total_size += 2;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void MeshData::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<MeshData*>(&to_msg);
  auto& from = static_cast<const MeshData&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:VCCSim.MeshData)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_data().empty()) {
    _this->_internal_set_data(from._internal_data());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(from._impl_.transform_ != nullptr);
    if (_this->_impl_.transform_ == nullptr) {
      _this->_impl_.transform_ =
          ::google::protobuf::Message::CopyConstruct<::VCCSim::Pose>(arena, *from._impl_.transform_);
    } else {
      _this->_impl_.transform_->MergeFrom(*from._impl_.transform_);
    }
  }
  if (from._internal_format() != 0) {
    _this->_impl_.format_ = from._impl_.format_;
  }
  if (from._internal_version() != 0) {
    _this->_impl_.version_ = from._impl_.version_;
  }
  if (from._internal_simplified() != 0) {
    _this->_impl_.simplified_ = from._impl_.simplified_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void MeshData::CopyFrom(const MeshData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:VCCSim.MeshData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void MeshData::InternalSwap(MeshData* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.data_, &other->_impl_.data_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MeshData, _impl_.simplified_)
      + sizeof(MeshData::_impl_.simplified_)
      - PROTOBUF_FIELD_OFFSET(MeshData, _impl_.transform_)>(
          reinterpret_cast<char*>(&_impl_.transform_),
          reinterpret_cast<char*>(&other->_impl_.transform_));
}

::google::protobuf::Metadata MeshData::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class MeshID::_Internal {
 public:
};

MeshID::MeshID(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:VCCSim.MeshID)
}
MeshID::MeshID(
    ::google::protobuf::Arena* arena, const MeshID& from)
    : MeshID(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE MeshID::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void MeshID::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.id_ = {};
}
MeshID::~MeshID() {
  // @@protoc_insertion_point(destructor:VCCSim.MeshID)
  SharedDtor(*this);
}
inline void MeshID::SharedDtor(MessageLite& self) {
  MeshID& this_ = static_cast<MeshID&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* MeshID::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) MeshID(arena);
}
constexpr auto MeshID::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(MeshID),
                                            alignof(MeshID));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull MeshID::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_MeshID_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &MeshID::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<MeshID>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &MeshID::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<MeshID>(), &MeshID::ByteSizeLong,
            &MeshID::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(MeshID, _impl_._cached_size_),
        false,
    },
    &MeshID::kDescriptorMethods,
    &descriptor_table_VCCSim_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* MeshID::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 0, 2> MeshID::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::VCCSim::MeshID>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // uint32 id = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(MeshID, _impl_.id_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(MeshID, _impl_.id_)}},
  }}, {{
    65535, 65535
  }}, {{
    // uint32 id = 1;
    {PROTOBUF_FIELD_OFFSET(MeshID, _impl_.id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
  }},
  // no aux_entries
  {{
  }},
};

PROTOBUF_NOINLINE void MeshID::Clear() {
// @@protoc_insertion_point(message_clear_start:VCCSim.MeshID)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.id_ = 0u;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* MeshID::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const MeshID& this_ = static_cast<const MeshID&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* MeshID::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const MeshID& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:VCCSim.MeshID)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // uint32 id = 1;
          if (this_._internal_id() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
                1, this_._internal_id(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:VCCSim.MeshID)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t MeshID::ByteSizeLong(const MessageLite& base) {
          const MeshID& this_ = static_cast<const MeshID&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t MeshID::ByteSizeLong() const {
          const MeshID& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:VCCSim.MeshID)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

           {
            // uint32 id = 1;
            if (this_._internal_id() != 0) {
              total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
                  this_._internal_id());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void MeshID::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<MeshID*>(&to_msg);
  auto& from = static_cast<const MeshID&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:VCCSim.MeshID)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_id() != 0) {
    _this->_impl_.id_ = from._impl_.id_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void MeshID::CopyFrom(const MeshID& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:VCCSim.MeshID)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void MeshID::InternalSwap(MeshID* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
        swap(_impl_.id_, other->_impl_.id_);
}

::google::protobuf::Metadata MeshID::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class LidarData::_Internal {
 public:
};

LidarData::LidarData(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:VCCSim.LidarData)
}
inline PROTOBUF_NDEBUG_INLINE LidarData::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::VCCSim::LidarData& from_msg)
      : data_{visibility, arena, from.data_},
        _cached_size_{0} {}

LidarData::LidarData(
    ::google::protobuf::Arena* arena,
    const LidarData& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  LidarData* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);

  // @@protoc_insertion_point(copy_constructor:VCCSim.LidarData)
}
inline PROTOBUF_NDEBUG_INLINE LidarData::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : data_{visibility, arena},
        _cached_size_{0} {}

inline void LidarData::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
LidarData::~LidarData() {
  // @@protoc_insertion_point(destructor:VCCSim.LidarData)
  SharedDtor(*this);
}
inline void LidarData::SharedDtor(MessageLite& self) {
  LidarData& this_ = static_cast<LidarData&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* LidarData::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) LidarData(arena);
}
constexpr auto LidarData::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(LidarData, _impl_.data_) +
          decltype(LidarData::_impl_.data_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::ZeroInit(
        sizeof(LidarData), alignof(LidarData), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&LidarData::PlacementNew_,
                                 sizeof(LidarData),
                                 alignof(LidarData));
  }
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull LidarData::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_LidarData_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &LidarData::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<LidarData>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &LidarData::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<LidarData>(), &LidarData::ByteSizeLong,
            &LidarData::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(LidarData, _impl_._cached_size_),
        false,
    },
    &LidarData::kDescriptorMethods,
    &descriptor_table_VCCSim_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* LidarData::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> LidarData::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::VCCSim::LidarData>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // repeated .VCCSim.Point data = 1;
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(LidarData, _impl_.data_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .VCCSim.Point data = 1;
    {PROTOBUF_FIELD_OFFSET(LidarData, _impl_.data_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::VCCSim::Point>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void LidarData::Clear() {
// @@protoc_insertion_point(message_clear_start:VCCSim.LidarData)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.data_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* LidarData::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const LidarData& this_ = static_cast<const LidarData&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* LidarData::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const LidarData& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:VCCSim.LidarData)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // repeated .VCCSim.Point data = 1;
          for (unsigned i = 0, n = static_cast<unsigned>(
                                   this_._internal_data_size());
               i < n; i++) {
            const auto& repfield = this_._internal_data().Get(i);
            target =
                ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                    1, repfield, repfield.GetCachedSize(),
                    target, stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:VCCSim.LidarData)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t LidarData::ByteSizeLong(const MessageLite& base) {
          const LidarData& this_ = static_cast<const LidarData&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t LidarData::ByteSizeLong() const {
          const LidarData& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:VCCSim.LidarData)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated .VCCSim.Point data = 1;
            {
              total_size += 1UL * this_._internal_data_size();
              for (const auto& msg : this_._internal_data()) {
                total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
              }
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void LidarData::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<LidarData*>(&to_msg);
  auto& from = static_cast<const LidarData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:VCCSim.LidarData)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_data()->MergeFrom(
      from._internal_data());
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void LidarData::CopyFrom(const LidarData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:VCCSim.LidarData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void LidarData::InternalSwap(LidarData* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.data_.InternalSwap(&other->_impl_.data_);
}

::google::protobuf::Metadata LidarData::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class LidarDataAndOdom::_Internal {
 public:
  using HasBits =
      decltype(std::declval<LidarDataAndOdom>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(LidarDataAndOdom, _impl_._has_bits_);
};

LidarDataAndOdom::LidarDataAndOdom(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:VCCSim.LidarDataAndOdom)
}
inline PROTOBUF_NDEBUG_INLINE LidarDataAndOdom::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::VCCSim::LidarDataAndOdom& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

LidarDataAndOdom::LidarDataAndOdom(
    ::google::protobuf::Arena* arena,
    const LidarDataAndOdom& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  LidarDataAndOdom* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.data_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::VCCSim::LidarData>(
                              arena, *from._impl_.data_)
                        : nullptr;
  _impl_.odom_ = (cached_has_bits & 0x00000002u) ? ::google::protobuf::Message::CopyConstruct<::VCCSim::Odometry>(
                              arena, *from._impl_.odom_)
                        : nullptr;

  // @@protoc_insertion_point(copy_constructor:VCCSim.LidarDataAndOdom)
}
inline PROTOBUF_NDEBUG_INLINE LidarDataAndOdom::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void LidarDataAndOdom::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, data_),
           0,
           offsetof(Impl_, odom_) -
               offsetof(Impl_, data_) +
               sizeof(Impl_::odom_));
}
LidarDataAndOdom::~LidarDataAndOdom() {
  // @@protoc_insertion_point(destructor:VCCSim.LidarDataAndOdom)
  SharedDtor(*this);
}
inline void LidarDataAndOdom::SharedDtor(MessageLite& self) {
  LidarDataAndOdom& this_ = static_cast<LidarDataAndOdom&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.data_;
  delete this_._impl_.odom_;
  this_._impl_.~Impl_();
}

inline void* LidarDataAndOdom::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) LidarDataAndOdom(arena);
}
constexpr auto LidarDataAndOdom::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(LidarDataAndOdom),
                                            alignof(LidarDataAndOdom));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull LidarDataAndOdom::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_LidarDataAndOdom_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &LidarDataAndOdom::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<LidarDataAndOdom>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &LidarDataAndOdom::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<LidarDataAndOdom>(), &LidarDataAndOdom::ByteSizeLong,
            &LidarDataAndOdom::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(LidarDataAndOdom, _impl_._cached_size_),
        false,
    },
    &LidarDataAndOdom::kDescriptorMethods,
    &descriptor_table_VCCSim_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* LidarDataAndOdom::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 2, 0, 2> LidarDataAndOdom::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(LidarDataAndOdom, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::VCCSim::LidarDataAndOdom>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .VCCSim.Odometry odom = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(LidarDataAndOdom, _impl_.odom_)}},
    // .VCCSim.LidarData data = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(LidarDataAndOdom, _impl_.data_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .VCCSim.LidarData data = 1;
    {PROTOBUF_FIELD_OFFSET(LidarDataAndOdom, _impl_.data_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .VCCSim.Odometry odom = 2;
    {PROTOBUF_FIELD_OFFSET(LidarDataAndOdom, _impl_.odom_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::VCCSim::LidarData>()},
    {::_pbi::TcParser::GetTable<::VCCSim::Odometry>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void LidarDataAndOdom::Clear() {
// @@protoc_insertion_point(message_clear_start:VCCSim.LidarDataAndOdom)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.data_ != nullptr);
      _impl_.data_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.odom_ != nullptr);
      _impl_.odom_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* LidarDataAndOdom::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const LidarDataAndOdom& this_ = static_cast<const LidarDataAndOdom&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* LidarDataAndOdom::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const LidarDataAndOdom& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:VCCSim.LidarDataAndOdom)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // .VCCSim.LidarData data = 1;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1, *this_._impl_.data_, this_._impl_.data_->GetCachedSize(), target,
                stream);
          }

          // .VCCSim.Odometry odom = 2;
          if (cached_has_bits & 0x00000002u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                2, *this_._impl_.odom_, this_._impl_.odom_->GetCachedSize(), target,
                stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:VCCSim.LidarDataAndOdom)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t LidarDataAndOdom::ByteSizeLong(const MessageLite& base) {
          const LidarDataAndOdom& this_ = static_cast<const LidarDataAndOdom&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t LidarDataAndOdom::ByteSizeLong() const {
          const LidarDataAndOdom& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:VCCSim.LidarDataAndOdom)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
          cached_has_bits = this_._impl_._has_bits_[0];
          if (cached_has_bits & 0x00000003u) {
            // .VCCSim.LidarData data = 1;
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.data_);
            }
            // .VCCSim.Odometry odom = 2;
            if (cached_has_bits & 0x00000002u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.odom_);
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void LidarDataAndOdom::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<LidarDataAndOdom*>(&to_msg);
  auto& from = static_cast<const LidarDataAndOdom&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:VCCSim.LidarDataAndOdom)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(from._impl_.data_ != nullptr);
      if (_this->_impl_.data_ == nullptr) {
        _this->_impl_.data_ =
            ::google::protobuf::Message::CopyConstruct<::VCCSim::LidarData>(arena, *from._impl_.data_);
      } else {
        _this->_impl_.data_->MergeFrom(*from._impl_.data_);
      }
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(from._impl_.odom_ != nullptr);
      if (_this->_impl_.odom_ == nullptr) {
        _this->_impl_.odom_ =
            ::google::protobuf::Message::CopyConstruct<::VCCSim::Odometry>(arena, *from._impl_.odom_);
      } else {
        _this->_impl_.odom_->MergeFrom(*from._impl_.odom_);
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void LidarDataAndOdom::CopyFrom(const LidarDataAndOdom& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:VCCSim.LidarDataAndOdom)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void LidarDataAndOdom::InternalSwap(LidarDataAndOdom* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LidarDataAndOdom, _impl_.odom_)
      + sizeof(LidarDataAndOdom::_impl_.odom_)
      - PROTOBUF_FIELD_OFFSET(LidarDataAndOdom, _impl_.data_)>(
          reinterpret_cast<char*>(&_impl_.data_),
          reinterpret_cast<char*>(&other->_impl_.data_));
}

::google::protobuf::Metadata LidarDataAndOdom::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class DepthCameraPointData::_Internal {
 public:
};

DepthCameraPointData::DepthCameraPointData(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:VCCSim.DepthCameraPointData)
}
inline PROTOBUF_NDEBUG_INLINE DepthCameraPointData::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::VCCSim::DepthCameraPointData& from_msg)
      : data_{visibility, arena, from.data_},
        _cached_size_{0} {}

DepthCameraPointData::DepthCameraPointData(
    ::google::protobuf::Arena* arena,
    const DepthCameraPointData& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  DepthCameraPointData* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);

  // @@protoc_insertion_point(copy_constructor:VCCSim.DepthCameraPointData)
}
inline PROTOBUF_NDEBUG_INLINE DepthCameraPointData::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : data_{visibility, arena},
        _cached_size_{0} {}

inline void DepthCameraPointData::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
DepthCameraPointData::~DepthCameraPointData() {
  // @@protoc_insertion_point(destructor:VCCSim.DepthCameraPointData)
  SharedDtor(*this);
}
inline void DepthCameraPointData::SharedDtor(MessageLite& self) {
  DepthCameraPointData& this_ = static_cast<DepthCameraPointData&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* DepthCameraPointData::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) DepthCameraPointData(arena);
}
constexpr auto DepthCameraPointData::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(DepthCameraPointData, _impl_.data_) +
          decltype(DepthCameraPointData::_impl_.data_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::ZeroInit(
        sizeof(DepthCameraPointData), alignof(DepthCameraPointData), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&DepthCameraPointData::PlacementNew_,
                                 sizeof(DepthCameraPointData),
                                 alignof(DepthCameraPointData));
  }
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull DepthCameraPointData::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_DepthCameraPointData_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &DepthCameraPointData::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<DepthCameraPointData>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &DepthCameraPointData::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<DepthCameraPointData>(), &DepthCameraPointData::ByteSizeLong,
            &DepthCameraPointData::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(DepthCameraPointData, _impl_._cached_size_),
        false,
    },
    &DepthCameraPointData::kDescriptorMethods,
    &descriptor_table_VCCSim_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* DepthCameraPointData::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> DepthCameraPointData::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::VCCSim::DepthCameraPointData>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // repeated .VCCSim.Point data = 1;
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(DepthCameraPointData, _impl_.data_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .VCCSim.Point data = 1;
    {PROTOBUF_FIELD_OFFSET(DepthCameraPointData, _impl_.data_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::VCCSim::Point>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void DepthCameraPointData::Clear() {
// @@protoc_insertion_point(message_clear_start:VCCSim.DepthCameraPointData)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.data_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* DepthCameraPointData::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const DepthCameraPointData& this_ = static_cast<const DepthCameraPointData&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* DepthCameraPointData::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const DepthCameraPointData& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:VCCSim.DepthCameraPointData)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // repeated .VCCSim.Point data = 1;
          for (unsigned i = 0, n = static_cast<unsigned>(
                                   this_._internal_data_size());
               i < n; i++) {
            const auto& repfield = this_._internal_data().Get(i);
            target =
                ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                    1, repfield, repfield.GetCachedSize(),
                    target, stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:VCCSim.DepthCameraPointData)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t DepthCameraPointData::ByteSizeLong(const MessageLite& base) {
          const DepthCameraPointData& this_ = static_cast<const DepthCameraPointData&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t DepthCameraPointData::ByteSizeLong() const {
          const DepthCameraPointData& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:VCCSim.DepthCameraPointData)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated .VCCSim.Point data = 1;
            {
              total_size += 1UL * this_._internal_data_size();
              for (const auto& msg : this_._internal_data()) {
                total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
              }
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void DepthCameraPointData::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<DepthCameraPointData*>(&to_msg);
  auto& from = static_cast<const DepthCameraPointData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:VCCSim.DepthCameraPointData)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_data()->MergeFrom(
      from._internal_data());
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void DepthCameraPointData::CopyFrom(const DepthCameraPointData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:VCCSim.DepthCameraPointData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void DepthCameraPointData::InternalSwap(DepthCameraPointData* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.data_.InternalSwap(&other->_impl_.data_);
}

::google::protobuf::Metadata DepthCameraPointData::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class DepthCameraImageData::_Internal {
 public:
};

DepthCameraImageData::DepthCameraImageData(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:VCCSim.DepthCameraImageData)
}
inline PROTOBUF_NDEBUG_INLINE DepthCameraImageData::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::VCCSim::DepthCameraImageData& from_msg)
      : data_{visibility, arena, from.data_},
        _cached_size_{0} {}

DepthCameraImageData::DepthCameraImageData(
    ::google::protobuf::Arena* arena,
    const DepthCameraImageData& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  DepthCameraImageData* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);

  // @@protoc_insertion_point(copy_constructor:VCCSim.DepthCameraImageData)
}
inline PROTOBUF_NDEBUG_INLINE DepthCameraImageData::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : data_{visibility, arena},
        _cached_size_{0} {}

inline void DepthCameraImageData::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
DepthCameraImageData::~DepthCameraImageData() {
  // @@protoc_insertion_point(destructor:VCCSim.DepthCameraImageData)
  SharedDtor(*this);
}
inline void DepthCameraImageData::SharedDtor(MessageLite& self) {
  DepthCameraImageData& this_ = static_cast<DepthCameraImageData&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* DepthCameraImageData::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) DepthCameraImageData(arena);
}
constexpr auto DepthCameraImageData::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(DepthCameraImageData, _impl_.data_) +
          decltype(DepthCameraImageData::_impl_.data_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::ZeroInit(
        sizeof(DepthCameraImageData), alignof(DepthCameraImageData), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&DepthCameraImageData::PlacementNew_,
                                 sizeof(DepthCameraImageData),
                                 alignof(DepthCameraImageData));
  }
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull DepthCameraImageData::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_DepthCameraImageData_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &DepthCameraImageData::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<DepthCameraImageData>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &DepthCameraImageData::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<DepthCameraImageData>(), &DepthCameraImageData::ByteSizeLong,
            &DepthCameraImageData::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(DepthCameraImageData, _impl_._cached_size_),
        false,
    },
    &DepthCameraImageData::kDescriptorMethods,
    &descriptor_table_VCCSim_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* DepthCameraImageData::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 0, 2> DepthCameraImageData::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::VCCSim::DepthCameraImageData>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // repeated float data = 1;
    {::_pbi::TcParser::FastF32P1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(DepthCameraImageData, _impl_.data_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated float data = 1;
    {PROTOBUF_FIELD_OFFSET(DepthCameraImageData, _impl_.data_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedFloat)},
  }},
  // no aux_entries
  {{
  }},
};

PROTOBUF_NOINLINE void DepthCameraImageData::Clear() {
// @@protoc_insertion_point(message_clear_start:VCCSim.DepthCameraImageData)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.data_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* DepthCameraImageData::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const DepthCameraImageData& this_ = static_cast<const DepthCameraImageData&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* DepthCameraImageData::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const DepthCameraImageData& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:VCCSim.DepthCameraImageData)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // repeated float data = 1;
          if (this_._internal_data_size() > 0) {
            target = stream->WriteFixedPacked(1, this_._internal_data(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:VCCSim.DepthCameraImageData)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t DepthCameraImageData::ByteSizeLong(const MessageLite& base) {
          const DepthCameraImageData& this_ = static_cast<const DepthCameraImageData&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t DepthCameraImageData::ByteSizeLong() const {
          const DepthCameraImageData& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:VCCSim.DepthCameraImageData)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated float data = 1;
            {
              std::size_t data_size = std::size_t{4} *
                  ::_pbi::FromIntSize(this_._internal_data_size());
              std::size_t tag_size = data_size == 0
                  ? 0
                  : 1 + ::_pbi::WireFormatLite::Int32Size(
                                      static_cast<int32_t>(data_size));
              total_size += tag_size + data_size;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void DepthCameraImageData::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<DepthCameraImageData*>(&to_msg);
  auto& from = static_cast<const DepthCameraImageData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:VCCSim.DepthCameraImageData)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_data()->MergeFrom(from._internal_data());
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void DepthCameraImageData::CopyFrom(const DepthCameraImageData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:VCCSim.DepthCameraImageData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void DepthCameraImageData::InternalSwap(DepthCameraImageData* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.data_.InternalSwap(&other->_impl_.data_);
}

::google::protobuf::Metadata DepthCameraImageData::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class RGBCameraImageData::_Internal {
 public:
  using HasBits =
      decltype(std::declval<RGBCameraImageData>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(RGBCameraImageData, _impl_._has_bits_);
};

RGBCameraImageData::RGBCameraImageData(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:VCCSim.RGBCameraImageData)
}
inline PROTOBUF_NDEBUG_INLINE RGBCameraImageData::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::VCCSim::RGBCameraImageData& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        data_(arena, from.data_) {}

RGBCameraImageData::RGBCameraImageData(
    ::google::protobuf::Arena* arena,
    const RGBCameraImageData& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  RGBCameraImageData* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, width_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, width_),
           offsetof(Impl_, is_compressed_) -
               offsetof(Impl_, width_) +
               sizeof(Impl_::is_compressed_));

  // @@protoc_insertion_point(copy_constructor:VCCSim.RGBCameraImageData)
}
inline PROTOBUF_NDEBUG_INLINE RGBCameraImageData::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        data_(arena) {}

inline void RGBCameraImageData::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, width_),
           0,
           offsetof(Impl_, is_compressed_) -
               offsetof(Impl_, width_) +
               sizeof(Impl_::is_compressed_));
}
RGBCameraImageData::~RGBCameraImageData() {
  // @@protoc_insertion_point(destructor:VCCSim.RGBCameraImageData)
  SharedDtor(*this);
}
inline void RGBCameraImageData::SharedDtor(MessageLite& self) {
  RGBCameraImageData& this_ = static_cast<RGBCameraImageData&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.data_.Destroy();
  this_._impl_.~Impl_();
}

inline void* RGBCameraImageData::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) RGBCameraImageData(arena);
}
constexpr auto RGBCameraImageData::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(RGBCameraImageData),
                                            alignof(RGBCameraImageData));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull RGBCameraImageData::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_RGBCameraImageData_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &RGBCameraImageData::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<RGBCameraImageData>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &RGBCameraImageData::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<RGBCameraImageData>(), &RGBCameraImageData::ByteSizeLong,
            &RGBCameraImageData::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(RGBCameraImageData, _impl_._cached_size_),
        false,
    },
    &RGBCameraImageData::kDescriptorMethods,
    &descriptor_table_VCCSim_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* RGBCameraImageData::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 8, 0, 0, 2> RGBCameraImageData::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(RGBCameraImageData, _impl_._has_bits_),
    0, // no _extensions_
    8, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967040,  // skipmap
    offsetof(decltype(_table_), field_entries),
    8,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::VCCSim::RGBCameraImageData>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // optional bool is_compressed = 8;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(RGBCameraImageData, _impl_.is_compressed_), 2>(),
     {64, 2, 0, PROTOBUF_FIELD_OFFSET(RGBCameraImageData, _impl_.is_compressed_)}},
    // uint32 width = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(RGBCameraImageData, _impl_.width_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(RGBCameraImageData, _impl_.width_)}},
    // uint32 height = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(RGBCameraImageData, _impl_.height_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(RGBCameraImageData, _impl_.height_)}},
    // bytes data = 3;
    {::_pbi::TcParser::FastBS1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(RGBCameraImageData, _impl_.data_)}},
    // .VCCSim.Format format = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(RGBCameraImageData, _impl_.format_), 63>(),
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(RGBCameraImageData, _impl_.format_)}},
    // uint32 timestamp = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(RGBCameraImageData, _impl_.timestamp_), 63>(),
     {40, 63, 0, PROTOBUF_FIELD_OFFSET(RGBCameraImageData, _impl_.timestamp_)}},
    // optional uint32 bytes_per_pixel = 6;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(RGBCameraImageData, _impl_.bytes_per_pixel_), 0>(),
     {48, 0, 0, PROTOBUF_FIELD_OFFSET(RGBCameraImageData, _impl_.bytes_per_pixel_)}},
    // optional uint32 stride = 7;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(RGBCameraImageData, _impl_.stride_), 1>(),
     {56, 1, 0, PROTOBUF_FIELD_OFFSET(RGBCameraImageData, _impl_.stride_)}},
  }}, {{
    65535, 65535
  }}, {{
    // uint32 width = 1;
    {PROTOBUF_FIELD_OFFSET(RGBCameraImageData, _impl_.width_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // uint32 height = 2;
    {PROTOBUF_FIELD_OFFSET(RGBCameraImageData, _impl_.height_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // bytes data = 3;
    {PROTOBUF_FIELD_OFFSET(RGBCameraImageData, _impl_.data_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBytes | ::_fl::kRepAString)},
    // .VCCSim.Format format = 4;
    {PROTOBUF_FIELD_OFFSET(RGBCameraImageData, _impl_.format_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // uint32 timestamp = 5;
    {PROTOBUF_FIELD_OFFSET(RGBCameraImageData, _impl_.timestamp_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // optional uint32 bytes_per_pixel = 6;
    {PROTOBUF_FIELD_OFFSET(RGBCameraImageData, _impl_.bytes_per_pixel_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional uint32 stride = 7;
    {PROTOBUF_FIELD_OFFSET(RGBCameraImageData, _impl_.stride_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional bool is_compressed = 8;
    {PROTOBUF_FIELD_OFFSET(RGBCameraImageData, _impl_.is_compressed_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
  }},
  // no aux_entries
  {{
  }},
};

PROTOBUF_NOINLINE void RGBCameraImageData::Clear() {
// @@protoc_insertion_point(message_clear_start:VCCSim.RGBCameraImageData)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.data_.ClearToEmpty();
  ::memset(&_impl_.width_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.timestamp_) -
      reinterpret_cast<char*>(&_impl_.width_)) + sizeof(_impl_.timestamp_));
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.bytes_per_pixel_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.is_compressed_) -
        reinterpret_cast<char*>(&_impl_.bytes_per_pixel_)) + sizeof(_impl_.is_compressed_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* RGBCameraImageData::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const RGBCameraImageData& this_ = static_cast<const RGBCameraImageData&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* RGBCameraImageData::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const RGBCameraImageData& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:VCCSim.RGBCameraImageData)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // uint32 width = 1;
          if (this_._internal_width() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
                1, this_._internal_width(), target);
          }

          // uint32 height = 2;
          if (this_._internal_height() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
                2, this_._internal_height(), target);
          }

          // bytes data = 3;
          if (!this_._internal_data().empty()) {
            const std::string& _s = this_._internal_data();
            target = stream->WriteBytesMaybeAliased(3, _s, target);
          }

          // .VCCSim.Format format = 4;
          if (this_._internal_format() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                4, this_._internal_format(), target);
          }

          // uint32 timestamp = 5;
          if (this_._internal_timestamp() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
                5, this_._internal_timestamp(), target);
          }

          cached_has_bits = this_._impl_._has_bits_[0];
          // optional uint32 bytes_per_pixel = 6;
          if (cached_has_bits & 0x00000001u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
                6, this_._internal_bytes_per_pixel(), target);
          }

          // optional uint32 stride = 7;
          if (cached_has_bits & 0x00000002u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
                7, this_._internal_stride(), target);
          }

          // optional bool is_compressed = 8;
          if (cached_has_bits & 0x00000004u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                8, this_._internal_is_compressed(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:VCCSim.RGBCameraImageData)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t RGBCameraImageData::ByteSizeLong(const MessageLite& base) {
          const RGBCameraImageData& this_ = static_cast<const RGBCameraImageData&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t RGBCameraImageData::ByteSizeLong() const {
          const RGBCameraImageData& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:VCCSim.RGBCameraImageData)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // bytes data = 3;
            if (!this_._internal_data().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                              this_._internal_data());
            }
            // uint32 width = 1;
            if (this_._internal_width() != 0) {
              total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
                  this_._internal_width());
            }
            // uint32 height = 2;
            if (this_._internal_height() != 0) {
              total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
                  this_._internal_height());
            }
            // .VCCSim.Format format = 4;
            if (this_._internal_format() != 0) {
              total_size += 1 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_format());
            }
            // uint32 timestamp = 5;
            if (this_._internal_timestamp() != 0) {
              total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
                  this_._internal_timestamp());
            }
          }
          cached_has_bits = this_._impl_._has_bits_[0];
          if (cached_has_bits & 0x00000007u) {
            // optional uint32 bytes_per_pixel = 6;
            if (cached_has_bits & 0x00000001u) {
              total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
                  this_._internal_bytes_per_pixel());
            }
            // optional uint32 stride = 7;
            if (cached_has_bits & 0x00000002u) {
              total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
                  this_._internal_stride());
            }
            // optional bool is_compressed = 8;
            if (cached_has_bits & 0x00000004u) {
              total_size += 2;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void RGBCameraImageData::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<RGBCameraImageData*>(&to_msg);
  auto& from = static_cast<const RGBCameraImageData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:VCCSim.RGBCameraImageData)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_data().empty()) {
    _this->_internal_set_data(from._internal_data());
  }
  if (from._internal_width() != 0) {
    _this->_impl_.width_ = from._impl_.width_;
  }
  if (from._internal_height() != 0) {
    _this->_impl_.height_ = from._impl_.height_;
  }
  if (from._internal_format() != 0) {
    _this->_impl_.format_ = from._impl_.format_;
  }
  if (from._internal_timestamp() != 0) {
    _this->_impl_.timestamp_ = from._impl_.timestamp_;
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.bytes_per_pixel_ = from._impl_.bytes_per_pixel_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.stride_ = from._impl_.stride_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.is_compressed_ = from._impl_.is_compressed_;
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void RGBCameraImageData::CopyFrom(const RGBCameraImageData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:VCCSim.RGBCameraImageData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void RGBCameraImageData::InternalSwap(RGBCameraImageData* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.data_, &other->_impl_.data_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RGBCameraImageData, _impl_.is_compressed_)
      + sizeof(RGBCameraImageData::_impl_.is_compressed_)
      - PROTOBUF_FIELD_OFFSET(RGBCameraImageData, _impl_.width_)>(
          reinterpret_cast<char*>(&_impl_.width_),
          reinterpret_cast<char*>(&other->_impl_.width_));
}

::google::protobuf::Metadata RGBCameraImageData::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class SegmentationCameraImageData::_Internal {
 public:
};

SegmentationCameraImageData::SegmentationCameraImageData(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:VCCSim.SegmentationCameraImageData)
}
inline PROTOBUF_NDEBUG_INLINE SegmentationCameraImageData::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::VCCSim::SegmentationCameraImageData& from_msg)
      : data_(arena, from.data_),
        _cached_size_{0} {}

SegmentationCameraImageData::SegmentationCameraImageData(
    ::google::protobuf::Arena* arena,
    const SegmentationCameraImageData& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SegmentationCameraImageData* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, width_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, width_),
           offsetof(Impl_, height_) -
               offsetof(Impl_, width_) +
               sizeof(Impl_::height_));

  // @@protoc_insertion_point(copy_constructor:VCCSim.SegmentationCameraImageData)
}
inline PROTOBUF_NDEBUG_INLINE SegmentationCameraImageData::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : data_(arena),
        _cached_size_{0} {}

inline void SegmentationCameraImageData::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, width_),
           0,
           offsetof(Impl_, height_) -
               offsetof(Impl_, width_) +
               sizeof(Impl_::height_));
}
SegmentationCameraImageData::~SegmentationCameraImageData() {
  // @@protoc_insertion_point(destructor:VCCSim.SegmentationCameraImageData)
  SharedDtor(*this);
}
inline void SegmentationCameraImageData::SharedDtor(MessageLite& self) {
  SegmentationCameraImageData& this_ = static_cast<SegmentationCameraImageData&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.data_.Destroy();
  this_._impl_.~Impl_();
}

inline void* SegmentationCameraImageData::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) SegmentationCameraImageData(arena);
}
constexpr auto SegmentationCameraImageData::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(SegmentationCameraImageData),
                                            alignof(SegmentationCameraImageData));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull SegmentationCameraImageData::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_SegmentationCameraImageData_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &SegmentationCameraImageData::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<SegmentationCameraImageData>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &SegmentationCameraImageData::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<SegmentationCameraImageData>(), &SegmentationCameraImageData::ByteSizeLong,
            &SegmentationCameraImageData::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(SegmentationCameraImageData, _impl_._cached_size_),
        false,
    },
    &SegmentationCameraImageData::kDescriptorMethods,
    &descriptor_table_VCCSim_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* SegmentationCameraImageData::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 0, 0, 2> SegmentationCameraImageData::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::VCCSim::SegmentationCameraImageData>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // uint32 width = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(SegmentationCameraImageData, _impl_.width_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(SegmentationCameraImageData, _impl_.width_)}},
    // uint32 height = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(SegmentationCameraImageData, _impl_.height_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(SegmentationCameraImageData, _impl_.height_)}},
    // bytes data = 3;
    {::_pbi::TcParser::FastBS1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(SegmentationCameraImageData, _impl_.data_)}},
  }}, {{
    65535, 65535
  }}, {{
    // uint32 width = 1;
    {PROTOBUF_FIELD_OFFSET(SegmentationCameraImageData, _impl_.width_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // uint32 height = 2;
    {PROTOBUF_FIELD_OFFSET(SegmentationCameraImageData, _impl_.height_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // bytes data = 3;
    {PROTOBUF_FIELD_OFFSET(SegmentationCameraImageData, _impl_.data_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBytes | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
  }},
};

PROTOBUF_NOINLINE void SegmentationCameraImageData::Clear() {
// @@protoc_insertion_point(message_clear_start:VCCSim.SegmentationCameraImageData)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.data_.ClearToEmpty();
  ::memset(&_impl_.width_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.height_) -
      reinterpret_cast<char*>(&_impl_.width_)) + sizeof(_impl_.height_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* SegmentationCameraImageData::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const SegmentationCameraImageData& this_ = static_cast<const SegmentationCameraImageData&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* SegmentationCameraImageData::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const SegmentationCameraImageData& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:VCCSim.SegmentationCameraImageData)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // uint32 width = 1;
          if (this_._internal_width() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
                1, this_._internal_width(), target);
          }

          // uint32 height = 2;
          if (this_._internal_height() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
                2, this_._internal_height(), target);
          }

          // bytes data = 3;
          if (!this_._internal_data().empty()) {
            const std::string& _s = this_._internal_data();
            target = stream->WriteBytesMaybeAliased(3, _s, target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:VCCSim.SegmentationCameraImageData)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t SegmentationCameraImageData::ByteSizeLong(const MessageLite& base) {
          const SegmentationCameraImageData& this_ = static_cast<const SegmentationCameraImageData&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t SegmentationCameraImageData::ByteSizeLong() const {
          const SegmentationCameraImageData& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:VCCSim.SegmentationCameraImageData)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // bytes data = 3;
            if (!this_._internal_data().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                              this_._internal_data());
            }
            // uint32 width = 1;
            if (this_._internal_width() != 0) {
              total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
                  this_._internal_width());
            }
            // uint32 height = 2;
            if (this_._internal_height() != 0) {
              total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
                  this_._internal_height());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void SegmentationCameraImageData::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<SegmentationCameraImageData*>(&to_msg);
  auto& from = static_cast<const SegmentationCameraImageData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:VCCSim.SegmentationCameraImageData)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_data().empty()) {
    _this->_internal_set_data(from._internal_data());
  }
  if (from._internal_width() != 0) {
    _this->_impl_.width_ = from._impl_.width_;
  }
  if (from._internal_height() != 0) {
    _this->_impl_.height_ = from._impl_.height_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SegmentationCameraImageData::CopyFrom(const SegmentationCameraImageData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:VCCSim.SegmentationCameraImageData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void SegmentationCameraImageData::InternalSwap(SegmentationCameraImageData* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.data_, &other->_impl_.data_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SegmentationCameraImageData, _impl_.height_)
      + sizeof(SegmentationCameraImageData::_impl_.height_)
      - PROTOBUF_FIELD_OFFSET(SegmentationCameraImageData, _impl_.width_)>(
          reinterpret_cast<char*>(&_impl_.width_),
          reinterpret_cast<char*>(&other->_impl_.width_));
}

::google::protobuf::Metadata SegmentationCameraImageData::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class DronePose::_Internal {
 public:
  using HasBits =
      decltype(std::declval<DronePose>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(DronePose, _impl_._has_bits_);
};

DronePose::DronePose(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:VCCSim.DronePose)
}
inline PROTOBUF_NDEBUG_INLINE DronePose::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::VCCSim::DronePose& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        name_(arena, from.name_) {}

DronePose::DronePose(
    ::google::protobuf::Arena* arena,
    const DronePose& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  DronePose* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.pose_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::VCCSim::Pose>(
                              arena, *from._impl_.pose_)
                        : nullptr;

  // @@protoc_insertion_point(copy_constructor:VCCSim.DronePose)
}
inline PROTOBUF_NDEBUG_INLINE DronePose::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        name_(arena) {}

inline void DronePose::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.pose_ = {};
}
DronePose::~DronePose() {
  // @@protoc_insertion_point(destructor:VCCSim.DronePose)
  SharedDtor(*this);
}
inline void DronePose::SharedDtor(MessageLite& self) {
  DronePose& this_ = static_cast<DronePose&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.name_.Destroy();
  delete this_._impl_.pose_;
  this_._impl_.~Impl_();
}

inline void* DronePose::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) DronePose(arena);
}
constexpr auto DronePose::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(DronePose),
                                            alignof(DronePose));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull DronePose::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_DronePose_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &DronePose::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<DronePose>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &DronePose::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<DronePose>(), &DronePose::ByteSizeLong,
            &DronePose::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(DronePose, _impl_._cached_size_),
        false,
    },
    &DronePose::kDescriptorMethods,
    &descriptor_table_VCCSim_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* DronePose::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 1, 29, 2> DronePose::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(DronePose, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::VCCSim::DronePose>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .VCCSim.Pose pose = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(DronePose, _impl_.pose_)}},
    // string name = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(DronePose, _impl_.name_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string name = 1;
    {PROTOBUF_FIELD_OFFSET(DronePose, _impl_.name_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .VCCSim.Pose pose = 2;
    {PROTOBUF_FIELD_OFFSET(DronePose, _impl_.pose_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::VCCSim::Pose>()},
  }}, {{
    "\20\4\0\0\0\0\0\0"
    "VCCSim.DronePose"
    "name"
  }},
};

PROTOBUF_NOINLINE void DronePose::Clear() {
// @@protoc_insertion_point(message_clear_start:VCCSim.DronePose)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.pose_ != nullptr);
    _impl_.pose_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* DronePose::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const DronePose& this_ = static_cast<const DronePose&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* DronePose::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const DronePose& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:VCCSim.DronePose)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // string name = 1;
          if (!this_._internal_name().empty()) {
            const std::string& _s = this_._internal_name();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "VCCSim.DronePose.name");
            target = stream->WriteStringMaybeAliased(1, _s, target);
          }

          cached_has_bits = this_._impl_._has_bits_[0];
          // .VCCSim.Pose pose = 2;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                2, *this_._impl_.pose_, this_._impl_.pose_->GetCachedSize(), target,
                stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:VCCSim.DronePose)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t DronePose::ByteSizeLong(const MessageLite& base) {
          const DronePose& this_ = static_cast<const DronePose&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t DronePose::ByteSizeLong() const {
          const DronePose& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:VCCSim.DronePose)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // string name = 1;
            if (!this_._internal_name().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_name());
            }
          }
           {
            // .VCCSim.Pose pose = 2;
            cached_has_bits = this_._impl_._has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.pose_);
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void DronePose::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<DronePose*>(&to_msg);
  auto& from = static_cast<const DronePose&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:VCCSim.DronePose)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(from._impl_.pose_ != nullptr);
    if (_this->_impl_.pose_ == nullptr) {
      _this->_impl_.pose_ =
          ::google::protobuf::Message::CopyConstruct<::VCCSim::Pose>(arena, *from._impl_.pose_);
    } else {
      _this->_impl_.pose_->MergeFrom(*from._impl_.pose_);
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void DronePose::CopyFrom(const DronePose& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:VCCSim.DronePose)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void DronePose::InternalSwap(DronePose* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, &other->_impl_.name_, arena);
  swap(_impl_.pose_, other->_impl_.pose_);
}

::google::protobuf::Metadata DronePose::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class DronePath::_Internal {
 public:
};

DronePath::DronePath(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:VCCSim.DronePath)
}
inline PROTOBUF_NDEBUG_INLINE DronePath::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::VCCSim::DronePath& from_msg)
      : path_{visibility, arena, from.path_},
        name_(arena, from.name_),
        _cached_size_{0} {}

DronePath::DronePath(
    ::google::protobuf::Arena* arena,
    const DronePath& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  DronePath* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);

  // @@protoc_insertion_point(copy_constructor:VCCSim.DronePath)
}
inline PROTOBUF_NDEBUG_INLINE DronePath::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : path_{visibility, arena},
        name_(arena),
        _cached_size_{0} {}

inline void DronePath::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
DronePath::~DronePath() {
  // @@protoc_insertion_point(destructor:VCCSim.DronePath)
  SharedDtor(*this);
}
inline void DronePath::SharedDtor(MessageLite& self) {
  DronePath& this_ = static_cast<DronePath&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.name_.Destroy();
  this_._impl_.~Impl_();
}

inline void* DronePath::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) DronePath(arena);
}
constexpr auto DronePath::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(DronePath, _impl_.path_) +
          decltype(DronePath::_impl_.path_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::CopyInit(
        sizeof(DronePath), alignof(DronePath), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&DronePath::PlacementNew_,
                                 sizeof(DronePath),
                                 alignof(DronePath));
  }
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull DronePath::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_DronePath_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &DronePath::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<DronePath>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &DronePath::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<DronePath>(), &DronePath::ByteSizeLong,
            &DronePath::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(DronePath, _impl_._cached_size_),
        false,
    },
    &DronePath::kDescriptorMethods,
    &descriptor_table_VCCSim_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* DronePath::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 1, 29, 2> DronePath::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::VCCSim::DronePath>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // repeated .VCCSim.Pose path = 2;
    {::_pbi::TcParser::FastMtR1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(DronePath, _impl_.path_)}},
    // string name = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(DronePath, _impl_.name_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string name = 1;
    {PROTOBUF_FIELD_OFFSET(DronePath, _impl_.name_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // repeated .VCCSim.Pose path = 2;
    {PROTOBUF_FIELD_OFFSET(DronePath, _impl_.path_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::VCCSim::Pose>()},
  }}, {{
    "\20\4\0\0\0\0\0\0"
    "VCCSim.DronePath"
    "name"
  }},
};

PROTOBUF_NOINLINE void DronePath::Clear() {
// @@protoc_insertion_point(message_clear_start:VCCSim.DronePath)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.path_.Clear();
  _impl_.name_.ClearToEmpty();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* DronePath::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const DronePath& this_ = static_cast<const DronePath&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* DronePath::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const DronePath& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:VCCSim.DronePath)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // string name = 1;
          if (!this_._internal_name().empty()) {
            const std::string& _s = this_._internal_name();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "VCCSim.DronePath.name");
            target = stream->WriteStringMaybeAliased(1, _s, target);
          }

          // repeated .VCCSim.Pose path = 2;
          for (unsigned i = 0, n = static_cast<unsigned>(
                                   this_._internal_path_size());
               i < n; i++) {
            const auto& repfield = this_._internal_path().Get(i);
            target =
                ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                    2, repfield, repfield.GetCachedSize(),
                    target, stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:VCCSim.DronePath)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t DronePath::ByteSizeLong(const MessageLite& base) {
          const DronePath& this_ = static_cast<const DronePath&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t DronePath::ByteSizeLong() const {
          const DronePath& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:VCCSim.DronePath)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated .VCCSim.Pose path = 2;
            {
              total_size += 1UL * this_._internal_path_size();
              for (const auto& msg : this_._internal_path()) {
                total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
              }
            }
          }
           {
            // string name = 1;
            if (!this_._internal_name().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_name());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void DronePath::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<DronePath*>(&to_msg);
  auto& from = static_cast<const DronePath&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:VCCSim.DronePath)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_path()->MergeFrom(
      from._internal_path());
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void DronePath::CopyFrom(const DronePath& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:VCCSim.DronePath)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void DronePath::InternalSwap(DronePath* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.path_.InternalSwap(&other->_impl_.path_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, &other->_impl_.name_, arena);
}

::google::protobuf::Metadata DronePath::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class CarPose::_Internal {
 public:
  using HasBits =
      decltype(std::declval<CarPose>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(CarPose, _impl_._has_bits_);
};

CarPose::CarPose(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:VCCSim.CarPose)
}
inline PROTOBUF_NDEBUG_INLINE CarPose::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::VCCSim::CarPose& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        name_(arena, from.name_) {}

CarPose::CarPose(
    ::google::protobuf::Arena* arena,
    const CarPose& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  CarPose* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.pose_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::VCCSim::PoseOnlyYaw>(
                              arena, *from._impl_.pose_)
                        : nullptr;

  // @@protoc_insertion_point(copy_constructor:VCCSim.CarPose)
}
inline PROTOBUF_NDEBUG_INLINE CarPose::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        name_(arena) {}

inline void CarPose::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.pose_ = {};
}
CarPose::~CarPose() {
  // @@protoc_insertion_point(destructor:VCCSim.CarPose)
  SharedDtor(*this);
}
inline void CarPose::SharedDtor(MessageLite& self) {
  CarPose& this_ = static_cast<CarPose&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.name_.Destroy();
  delete this_._impl_.pose_;
  this_._impl_.~Impl_();
}

inline void* CarPose::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) CarPose(arena);
}
constexpr auto CarPose::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(CarPose),
                                            alignof(CarPose));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull CarPose::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_CarPose_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &CarPose::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<CarPose>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &CarPose::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<CarPose>(), &CarPose::ByteSizeLong,
            &CarPose::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(CarPose, _impl_._cached_size_),
        false,
    },
    &CarPose::kDescriptorMethods,
    &descriptor_table_VCCSim_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* CarPose::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 1, 27, 2> CarPose::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(CarPose, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::VCCSim::CarPose>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .VCCSim.PoseOnlyYaw pose = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(CarPose, _impl_.pose_)}},
    // string name = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(CarPose, _impl_.name_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string name = 1;
    {PROTOBUF_FIELD_OFFSET(CarPose, _impl_.name_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .VCCSim.PoseOnlyYaw pose = 2;
    {PROTOBUF_FIELD_OFFSET(CarPose, _impl_.pose_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::VCCSim::PoseOnlyYaw>()},
  }}, {{
    "\16\4\0\0\0\0\0\0"
    "VCCSim.CarPose"
    "name"
  }},
};

PROTOBUF_NOINLINE void CarPose::Clear() {
// @@protoc_insertion_point(message_clear_start:VCCSim.CarPose)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.pose_ != nullptr);
    _impl_.pose_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* CarPose::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const CarPose& this_ = static_cast<const CarPose&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* CarPose::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const CarPose& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:VCCSim.CarPose)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // string name = 1;
          if (!this_._internal_name().empty()) {
            const std::string& _s = this_._internal_name();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "VCCSim.CarPose.name");
            target = stream->WriteStringMaybeAliased(1, _s, target);
          }

          cached_has_bits = this_._impl_._has_bits_[0];
          // .VCCSim.PoseOnlyYaw pose = 2;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                2, *this_._impl_.pose_, this_._impl_.pose_->GetCachedSize(), target,
                stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:VCCSim.CarPose)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t CarPose::ByteSizeLong(const MessageLite& base) {
          const CarPose& this_ = static_cast<const CarPose&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t CarPose::ByteSizeLong() const {
          const CarPose& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:VCCSim.CarPose)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // string name = 1;
            if (!this_._internal_name().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_name());
            }
          }
           {
            // .VCCSim.PoseOnlyYaw pose = 2;
            cached_has_bits = this_._impl_._has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.pose_);
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void CarPose::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<CarPose*>(&to_msg);
  auto& from = static_cast<const CarPose&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:VCCSim.CarPose)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(from._impl_.pose_ != nullptr);
    if (_this->_impl_.pose_ == nullptr) {
      _this->_impl_.pose_ =
          ::google::protobuf::Message::CopyConstruct<::VCCSim::PoseOnlyYaw>(arena, *from._impl_.pose_);
    } else {
      _this->_impl_.pose_->MergeFrom(*from._impl_.pose_);
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void CarPose::CopyFrom(const CarPose& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:VCCSim.CarPose)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void CarPose::InternalSwap(CarPose* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, &other->_impl_.name_, arena);
  swap(_impl_.pose_, other->_impl_.pose_);
}

::google::protobuf::Metadata CarPose::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class CarPath::_Internal {
 public:
};

CarPath::CarPath(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:VCCSim.CarPath)
}
inline PROTOBUF_NDEBUG_INLINE CarPath::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::VCCSim::CarPath& from_msg)
      : path_{visibility, arena, from.path_},
        name_(arena, from.name_),
        _cached_size_{0} {}

CarPath::CarPath(
    ::google::protobuf::Arena* arena,
    const CarPath& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  CarPath* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);

  // @@protoc_insertion_point(copy_constructor:VCCSim.CarPath)
}
inline PROTOBUF_NDEBUG_INLINE CarPath::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : path_{visibility, arena},
        name_(arena),
        _cached_size_{0} {}

inline void CarPath::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
CarPath::~CarPath() {
  // @@protoc_insertion_point(destructor:VCCSim.CarPath)
  SharedDtor(*this);
}
inline void CarPath::SharedDtor(MessageLite& self) {
  CarPath& this_ = static_cast<CarPath&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.name_.Destroy();
  this_._impl_.~Impl_();
}

inline void* CarPath::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) CarPath(arena);
}
constexpr auto CarPath::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(CarPath, _impl_.path_) +
          decltype(CarPath::_impl_.path_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::CopyInit(
        sizeof(CarPath), alignof(CarPath), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&CarPath::PlacementNew_,
                                 sizeof(CarPath),
                                 alignof(CarPath));
  }
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull CarPath::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_CarPath_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &CarPath::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<CarPath>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &CarPath::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<CarPath>(), &CarPath::ByteSizeLong,
            &CarPath::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(CarPath, _impl_._cached_size_),
        false,
    },
    &CarPath::kDescriptorMethods,
    &descriptor_table_VCCSim_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* CarPath::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 1, 27, 2> CarPath::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::VCCSim::CarPath>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // repeated .VCCSim.PoseOnlyYaw path = 2;
    {::_pbi::TcParser::FastMtR1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(CarPath, _impl_.path_)}},
    // string name = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(CarPath, _impl_.name_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string name = 1;
    {PROTOBUF_FIELD_OFFSET(CarPath, _impl_.name_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // repeated .VCCSim.PoseOnlyYaw path = 2;
    {PROTOBUF_FIELD_OFFSET(CarPath, _impl_.path_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::VCCSim::PoseOnlyYaw>()},
  }}, {{
    "\16\4\0\0\0\0\0\0"
    "VCCSim.CarPath"
    "name"
  }},
};

PROTOBUF_NOINLINE void CarPath::Clear() {
// @@protoc_insertion_point(message_clear_start:VCCSim.CarPath)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.path_.Clear();
  _impl_.name_.ClearToEmpty();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* CarPath::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const CarPath& this_ = static_cast<const CarPath&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* CarPath::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const CarPath& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:VCCSim.CarPath)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // string name = 1;
          if (!this_._internal_name().empty()) {
            const std::string& _s = this_._internal_name();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "VCCSim.CarPath.name");
            target = stream->WriteStringMaybeAliased(1, _s, target);
          }

          // repeated .VCCSim.PoseOnlyYaw path = 2;
          for (unsigned i = 0, n = static_cast<unsigned>(
                                   this_._internal_path_size());
               i < n; i++) {
            const auto& repfield = this_._internal_path().Get(i);
            target =
                ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                    2, repfield, repfield.GetCachedSize(),
                    target, stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:VCCSim.CarPath)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t CarPath::ByteSizeLong(const MessageLite& base) {
          const CarPath& this_ = static_cast<const CarPath&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t CarPath::ByteSizeLong() const {
          const CarPath& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:VCCSim.CarPath)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated .VCCSim.PoseOnlyYaw path = 2;
            {
              total_size += 1UL * this_._internal_path_size();
              for (const auto& msg : this_._internal_path()) {
                total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
              }
            }
          }
           {
            // string name = 1;
            if (!this_._internal_name().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_name());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void CarPath::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<CarPath*>(&to_msg);
  auto& from = static_cast<const CarPath&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:VCCSim.CarPath)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_path()->MergeFrom(
      from._internal_path());
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void CarPath::CopyFrom(const CarPath& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:VCCSim.CarPath)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void CarPath::InternalSwap(CarPath* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.path_.InternalSwap(&other->_impl_.path_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, &other->_impl_.name_, arena);
}

::google::protobuf::Metadata CarPath::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class FlashPose::_Internal {
 public:
  using HasBits =
      decltype(std::declval<FlashPose>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(FlashPose, _impl_._has_bits_);
};

FlashPose::FlashPose(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:VCCSim.FlashPose)
}
inline PROTOBUF_NDEBUG_INLINE FlashPose::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::VCCSim::FlashPose& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        name_(arena, from.name_) {}

FlashPose::FlashPose(
    ::google::protobuf::Arena* arena,
    const FlashPose& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  FlashPose* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.pose_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::VCCSim::Pose>(
                              arena, *from._impl_.pose_)
                        : nullptr;

  // @@protoc_insertion_point(copy_constructor:VCCSim.FlashPose)
}
inline PROTOBUF_NDEBUG_INLINE FlashPose::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        name_(arena) {}

inline void FlashPose::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.pose_ = {};
}
FlashPose::~FlashPose() {
  // @@protoc_insertion_point(destructor:VCCSim.FlashPose)
  SharedDtor(*this);
}
inline void FlashPose::SharedDtor(MessageLite& self) {
  FlashPose& this_ = static_cast<FlashPose&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.name_.Destroy();
  delete this_._impl_.pose_;
  this_._impl_.~Impl_();
}

inline void* FlashPose::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) FlashPose(arena);
}
constexpr auto FlashPose::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(FlashPose),
                                            alignof(FlashPose));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull FlashPose::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_FlashPose_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &FlashPose::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<FlashPose>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &FlashPose::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<FlashPose>(), &FlashPose::ByteSizeLong,
            &FlashPose::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(FlashPose, _impl_._cached_size_),
        false,
    },
    &FlashPose::kDescriptorMethods,
    &descriptor_table_VCCSim_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* FlashPose::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 1, 29, 2> FlashPose::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(FlashPose, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::VCCSim::FlashPose>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .VCCSim.Pose pose = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(FlashPose, _impl_.pose_)}},
    // string name = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(FlashPose, _impl_.name_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string name = 1;
    {PROTOBUF_FIELD_OFFSET(FlashPose, _impl_.name_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .VCCSim.Pose pose = 2;
    {PROTOBUF_FIELD_OFFSET(FlashPose, _impl_.pose_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::VCCSim::Pose>()},
  }}, {{
    "\20\4\0\0\0\0\0\0"
    "VCCSim.FlashPose"
    "name"
  }},
};

PROTOBUF_NOINLINE void FlashPose::Clear() {
// @@protoc_insertion_point(message_clear_start:VCCSim.FlashPose)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.pose_ != nullptr);
    _impl_.pose_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* FlashPose::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const FlashPose& this_ = static_cast<const FlashPose&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* FlashPose::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const FlashPose& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:VCCSim.FlashPose)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // string name = 1;
          if (!this_._internal_name().empty()) {
            const std::string& _s = this_._internal_name();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "VCCSim.FlashPose.name");
            target = stream->WriteStringMaybeAliased(1, _s, target);
          }

          cached_has_bits = this_._impl_._has_bits_[0];
          // .VCCSim.Pose pose = 2;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                2, *this_._impl_.pose_, this_._impl_.pose_->GetCachedSize(), target,
                stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:VCCSim.FlashPose)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t FlashPose::ByteSizeLong(const MessageLite& base) {
          const FlashPose& this_ = static_cast<const FlashPose&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t FlashPose::ByteSizeLong() const {
          const FlashPose& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:VCCSim.FlashPose)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // string name = 1;
            if (!this_._internal_name().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_name());
            }
          }
           {
            // .VCCSim.Pose pose = 2;
            cached_has_bits = this_._impl_._has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.pose_);
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void FlashPose::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<FlashPose*>(&to_msg);
  auto& from = static_cast<const FlashPose&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:VCCSim.FlashPose)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(from._impl_.pose_ != nullptr);
    if (_this->_impl_.pose_ == nullptr) {
      _this->_impl_.pose_ =
          ::google::protobuf::Message::CopyConstruct<::VCCSim::Pose>(arena, *from._impl_.pose_);
    } else {
      _this->_impl_.pose_->MergeFrom(*from._impl_.pose_);
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void FlashPose::CopyFrom(const FlashPose& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:VCCSim.FlashPose)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void FlashPose::InternalSwap(FlashPose* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, &other->_impl_.name_, arena);
  swap(_impl_.pose_, other->_impl_.pose_);
}

::google::protobuf::Metadata FlashPose::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class FlashPath::_Internal {
 public:
};

FlashPath::FlashPath(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:VCCSim.FlashPath)
}
inline PROTOBUF_NDEBUG_INLINE FlashPath::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::VCCSim::FlashPath& from_msg)
      : path_{visibility, arena, from.path_},
        name_(arena, from.name_),
        _cached_size_{0} {}

FlashPath::FlashPath(
    ::google::protobuf::Arena* arena,
    const FlashPath& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  FlashPath* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);

  // @@protoc_insertion_point(copy_constructor:VCCSim.FlashPath)
}
inline PROTOBUF_NDEBUG_INLINE FlashPath::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : path_{visibility, arena},
        name_(arena),
        _cached_size_{0} {}

inline void FlashPath::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
FlashPath::~FlashPath() {
  // @@protoc_insertion_point(destructor:VCCSim.FlashPath)
  SharedDtor(*this);
}
inline void FlashPath::SharedDtor(MessageLite& self) {
  FlashPath& this_ = static_cast<FlashPath&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.name_.Destroy();
  this_._impl_.~Impl_();
}

inline void* FlashPath::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) FlashPath(arena);
}
constexpr auto FlashPath::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(FlashPath, _impl_.path_) +
          decltype(FlashPath::_impl_.path_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::CopyInit(
        sizeof(FlashPath), alignof(FlashPath), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&FlashPath::PlacementNew_,
                                 sizeof(FlashPath),
                                 alignof(FlashPath));
  }
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull FlashPath::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_FlashPath_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &FlashPath::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<FlashPath>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &FlashPath::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<FlashPath>(), &FlashPath::ByteSizeLong,
            &FlashPath::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(FlashPath, _impl_._cached_size_),
        false,
    },
    &FlashPath::kDescriptorMethods,
    &descriptor_table_VCCSim_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* FlashPath::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 1, 29, 2> FlashPath::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::VCCSim::FlashPath>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // repeated .VCCSim.Pose path = 2;
    {::_pbi::TcParser::FastMtR1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(FlashPath, _impl_.path_)}},
    // string name = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(FlashPath, _impl_.name_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string name = 1;
    {PROTOBUF_FIELD_OFFSET(FlashPath, _impl_.name_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // repeated .VCCSim.Pose path = 2;
    {PROTOBUF_FIELD_OFFSET(FlashPath, _impl_.path_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::VCCSim::Pose>()},
  }}, {{
    "\20\4\0\0\0\0\0\0"
    "VCCSim.FlashPath"
    "name"
  }},
};

PROTOBUF_NOINLINE void FlashPath::Clear() {
// @@protoc_insertion_point(message_clear_start:VCCSim.FlashPath)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.path_.Clear();
  _impl_.name_.ClearToEmpty();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* FlashPath::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const FlashPath& this_ = static_cast<const FlashPath&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* FlashPath::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const FlashPath& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:VCCSim.FlashPath)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // string name = 1;
          if (!this_._internal_name().empty()) {
            const std::string& _s = this_._internal_name();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "VCCSim.FlashPath.name");
            target = stream->WriteStringMaybeAliased(1, _s, target);
          }

          // repeated .VCCSim.Pose path = 2;
          for (unsigned i = 0, n = static_cast<unsigned>(
                                   this_._internal_path_size());
               i < n; i++) {
            const auto& repfield = this_._internal_path().Get(i);
            target =
                ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                    2, repfield, repfield.GetCachedSize(),
                    target, stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:VCCSim.FlashPath)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t FlashPath::ByteSizeLong(const MessageLite& base) {
          const FlashPath& this_ = static_cast<const FlashPath&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t FlashPath::ByteSizeLong() const {
          const FlashPath& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:VCCSim.FlashPath)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated .VCCSim.Pose path = 2;
            {
              total_size += 1UL * this_._internal_path_size();
              for (const auto& msg : this_._internal_path()) {
                total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
              }
            }
          }
           {
            // string name = 1;
            if (!this_._internal_name().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_name());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void FlashPath::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<FlashPath*>(&to_msg);
  auto& from = static_cast<const FlashPath&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:VCCSim.FlashPath)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_path()->MergeFrom(
      from._internal_path());
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void FlashPath::CopyFrom(const FlashPath& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:VCCSim.FlashPath)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void FlashPath::InternalSwap(FlashPath* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.path_.InternalSwap(&other->_impl_.path_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, &other->_impl_.name_, arena);
}

::google::protobuf::Metadata FlashPath::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace VCCSim
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::std::false_type
    _static_init2_ PROTOBUF_UNUSED =
        (::_pbi::AddDescriptors(&descriptor_table_VCCSim_2eproto),
         ::std::false_type{});
#include "google/protobuf/port_undef.inc"
